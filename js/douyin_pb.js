// source: douyin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.AssetEffectMixInfo', null, global);
goog.exportSymbol('proto.ChatMessage', null, global);
goog.exportSymbol('proto.Common', null, global);
goog.exportSymbol('proto.ControlMessage', null, global);
goog.exportSymbol('proto.Decoration', null, global);
goog.exportSymbol('proto.EffectMixImageInfo', null, global);
goog.exportSymbol('proto.FansclubMessage', null, global);
goog.exportSymbol('proto.GiftBanner', null, global);
goog.exportSymbol('proto.GiftBuffInfo', null, global);
goog.exportSymbol('proto.GiftGroupInfo', null, global);
goog.exportSymbol('proto.GiftIMPriority', null, global);
goog.exportSymbol('proto.GiftMessage', null, global);
goog.exportSymbol('proto.GiftMessage.TextEffect', null, global);
goog.exportSymbol('proto.GiftMessage.TextEffect.Detail', null, global);
goog.exportSymbol('proto.GiftPanelOperation', null, global);
goog.exportSymbol('proto.GiftPreviewInfo', null, global);
goog.exportSymbol('proto.GiftStruct', null, global);
goog.exportSymbol('proto.GiftStruct.GiftStructFansClubInfo', null, global);
goog.exportSymbol('proto.GiftTip', null, global);
goog.exportSymbol('proto.GiftTrayInfo', null, global);
goog.exportSymbol('proto.Image', null, global);
goog.exportSymbol('proto.Image.Content', null, global);
goog.exportSymbol('proto.LikeMessage', null, global);
goog.exportSymbol('proto.LinkMic', null, global);
goog.exportSymbol('proto.LuckyMoneyGiftMeta', null, global);
goog.exportSymbol('proto.MemberMessage', null, global);
goog.exportSymbol('proto.MemberMessage.EffectConfig', null, global);
goog.exportSymbol('proto.Message', null, global);
goog.exportSymbol('proto.PublicAreaCommon', null, global);
goog.exportSymbol('proto.PushFrame', null, global);
goog.exportSymbol('proto.PushHeader', null, global);
goog.exportSymbol('proto.Response', null, global);
goog.exportSymbol('proto.Room', null, global);
goog.exportSymbol('proto.RoomExtra', null, global);
goog.exportSymbol('proto.RoomIntroMessage', null, global);
goog.exportSymbol('proto.RoomMessage', null, global);
goog.exportSymbol('proto.RoomStats', null, global);
goog.exportSymbol('proto.RoomUserAttr', null, global);
goog.exportSymbol('proto.RoomUserSeqMessage', null, global);
goog.exportSymbol('proto.RoomUserSeqMessage.Contributor', null, global);
goog.exportSymbol('proto.SocialMessage', null, global);
goog.exportSymbol('proto.StreamUrl', null, global);
goog.exportSymbol('proto.Text', null, global);
goog.exportSymbol('proto.TextFormat', null, global);
goog.exportSymbol('proto.TextPiece', null, global);
goog.exportSymbol('proto.TextPieceUser', null, global);
goog.exportSymbol('proto.TopFan', null, global);
goog.exportSymbol('proto.User', null, global);
goog.exportSymbol('proto.User.AnchorInfo', null, global);
goog.exportSymbol('proto.User.Border', null, global);
goog.exportSymbol('proto.User.FansClub', null, global);
goog.exportSymbol('proto.User.FansClub.FansClubData', null, global);
goog.exportSymbol('proto.User.FansClub.FansClubData.UserBadge', null, global);
goog.exportSymbol('proto.User.FollowInfo', null, global);
goog.exportSymbol('proto.User.GradeBuffInfo', null, global);
goog.exportSymbol('proto.User.OwnRoom', null, global);
goog.exportSymbol('proto.User.PayGrade', null, global);
goog.exportSymbol('proto.User.PayGrade.GradeIcon', null, global);
goog.exportSymbol('proto.User.UserAttr', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PushFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PushFrame.repeatedFields_, null);
};
goog.inherits(proto.PushFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PushFrame.displayName = 'proto.PushFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PushHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PushHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PushHeader.displayName = 'proto.PushHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Response.repeatedFields_, null);
};
goog.inherits(proto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Response.displayName = 'proto.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.displayName = 'proto.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomUserSeqMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RoomUserSeqMessage.repeatedFields_, null);
};
goog.inherits(proto.RoomUserSeqMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RoomUserSeqMessage.displayName = 'proto.RoomUserSeqMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomUserSeqMessage.Contributor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomUserSeqMessage.Contributor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RoomUserSeqMessage.Contributor.displayName = 'proto.RoomUserSeqMessage.Contributor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftMessage.displayName = 'proto.GiftMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftMessage.TextEffect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftMessage.TextEffect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftMessage.TextEffect.displayName = 'proto.GiftMessage.TextEffect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftMessage.TextEffect.Detail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftMessage.TextEffect.Detail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftMessage.TextEffect.Detail.displayName = 'proto.GiftMessage.TextEffect.Detail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LikeMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LikeMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LikeMessage.displayName = 'proto.LikeMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatMessage.displayName = 'proto.ChatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SocialMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMessage.displayName = 'proto.SocialMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MemberMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MemberMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MemberMessage.displayName = 'proto.MemberMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MemberMessage.EffectConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MemberMessage.EffectConfig.repeatedFields_, null);
};
goog.inherits(proto.MemberMessage.EffectConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MemberMessage.EffectConfig.displayName = 'proto.MemberMessage.EffectConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ControlMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ControlMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ControlMessage.displayName = 'proto.ControlMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FansclubMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FansclubMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FansclubMessage.displayName = 'proto.FansclubMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RoomMessage.displayName = 'proto.RoomMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomIntroMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RoomIntroMessage.repeatedFields_, null);
};
goog.inherits(proto.RoomIntroMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RoomIntroMessage.displayName = 'proto.RoomIntroMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Common, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.displayName = 'proto.Common';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Text.repeatedFields_, null);
};
goog.inherits(proto.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Text.displayName = 'proto.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Room = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Room.repeatedFields_, null);
};
goog.inherits(proto.Room, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Room.displayName = 'proto.Room';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomExtra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomExtra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RoomExtra.displayName = 'proto.RoomExtra';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RoomStats.displayName = 'proto.RoomStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomUserAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomUserAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RoomUserAttr.displayName = 'proto.RoomUserAttr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamUrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamUrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamUrl.displayName = 'proto.StreamUrl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LinkMic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LinkMic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LinkMic.displayName = 'proto.LinkMic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Decoration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Decoration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Decoration.displayName = 'proto.Decoration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TopFan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TopFan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TopFan.displayName = 'proto.TopFan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.User.repeatedFields_, null);
};
goog.inherits(proto.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.displayName = 'proto.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.UserAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User.UserAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.UserAttr.displayName = 'proto.User.UserAttr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.OwnRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User.OwnRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.OwnRoom.displayName = 'proto.User.OwnRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.AnchorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User.AnchorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.AnchorInfo.displayName = 'proto.User.AnchorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.FollowInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User.FollowInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.FollowInfo.displayName = 'proto.User.FollowInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.FansClub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User.FansClub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.FansClub.displayName = 'proto.User.FansClub';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.FansClub.FansClubData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.User.FansClub.FansClubData.repeatedFields_, null);
};
goog.inherits(proto.User.FansClub.FansClubData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.FansClub.FansClubData.displayName = 'proto.User.FansClub.FansClubData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.FansClub.FansClubData.UserBadge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User.FansClub.FansClubData.UserBadge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.FansClub.FansClubData.UserBadge.displayName = 'proto.User.FansClub.FansClubData.UserBadge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.Border = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User.Border, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.Border.displayName = 'proto.User.Border';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.GradeBuffInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User.GradeBuffInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.GradeBuffInfo.displayName = 'proto.User.GradeBuffInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.PayGrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.User.PayGrade.repeatedFields_, null);
};
goog.inherits(proto.User.PayGrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.PayGrade.displayName = 'proto.User.PayGrade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User.PayGrade.GradeIcon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User.PayGrade.GradeIcon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.PayGrade.GradeIcon.displayName = 'proto.User.PayGrade.GradeIcon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TextFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TextFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TextFormat.displayName = 'proto.TextFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TextPiece = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TextPiece, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TextPiece.displayName = 'proto.TextPiece';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Image.repeatedFields_, null);
};
goog.inherits(proto.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Image.displayName = 'proto.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.Content = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.Content, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Image.Content.displayName = 'proto.Image.Content';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TextPieceUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TextPieceUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TextPieceUser.displayName = 'proto.TextPieceUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PublicAreaCommon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PublicAreaCommon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PublicAreaCommon.displayName = 'proto.PublicAreaCommon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftIMPriority = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GiftIMPriority.repeatedFields_, null);
};
goog.inherits(proto.GiftIMPriority, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftIMPriority.displayName = 'proto.GiftIMPriority';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftTrayInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftTrayInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftTrayInfo.displayName = 'proto.GiftTrayInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftStruct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GiftStruct.repeatedFields_, null);
};
goog.inherits(proto.GiftStruct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftStruct.displayName = 'proto.GiftStruct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftStruct.GiftStructFansClubInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftStruct.GiftStructFansClubInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftStruct.GiftStructFansClubInfo.displayName = 'proto.GiftStruct.GiftStructFansClubInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AssetEffectMixInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AssetEffectMixInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AssetEffectMixInfo.displayName = 'proto.AssetEffectMixInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LuckyMoneyGiftMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LuckyMoneyGiftMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LuckyMoneyGiftMeta.displayName = 'proto.LuckyMoneyGiftMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftPanelOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftPanelOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftPanelOperation.displayName = 'proto.GiftPanelOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftBanner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftBanner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftBanner.displayName = 'proto.GiftBanner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftBuffInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftBuffInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftBuffInfo.displayName = 'proto.GiftBuffInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftPreviewInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftPreviewInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftPreviewInfo.displayName = 'proto.GiftPreviewInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftTip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftTip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftTip.displayName = 'proto.GiftTip';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GiftGroupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GiftGroupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GiftGroupInfo.displayName = 'proto.GiftGroupInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EffectMixImageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EffectMixImageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EffectMixImageInfo.displayName = 'proto.EffectMixImageInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PushFrame.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PushFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.PushFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PushFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    seqid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    service: jspb.Message.getFieldWithDefault(msg, 3, 0),
    method: jspb.Message.getFieldWithDefault(msg, 4, 0),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.PushHeader.toObject, includeInstance),
    payloadencoding: jspb.Message.getFieldWithDefault(msg, 6, ""),
    payloadtype: jspb.Message.getFieldWithDefault(msg, 7, ""),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PushFrame}
 */
proto.PushFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PushFrame;
  return proto.PushFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PushFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PushFrame}
 */
proto.PushFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLogid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setService(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMethod(value);
      break;
    case 5:
      var value = new proto.PushHeader;
      reader.readMessage(value,proto.PushHeader.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayloadencoding(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayloadtype(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PushFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PushFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PushFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeqid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLogid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getService();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMethod();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.PushHeader.serializeBinaryToWriter
    );
  }
  f = message.getPayloadencoding();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPayloadtype();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional int64 seqid = 1;
 * @return {number}
 */
proto.PushFrame.prototype.getSeqid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PushFrame} returns this
 */
proto.PushFrame.prototype.setSeqid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 logid = 2;
 * @return {number}
 */
proto.PushFrame.prototype.getLogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PushFrame} returns this
 */
proto.PushFrame.prototype.setLogid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 service = 3;
 * @return {number}
 */
proto.PushFrame.prototype.getService = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PushFrame} returns this
 */
proto.PushFrame.prototype.setService = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 method = 4;
 * @return {number}
 */
proto.PushFrame.prototype.getMethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PushFrame} returns this
 */
proto.PushFrame.prototype.setMethod = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated PushHeader headers = 5;
 * @return {!Array<!proto.PushHeader>}
 */
proto.PushFrame.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.PushHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PushHeader, 5));
};


/**
 * @param {!Array<!proto.PushHeader>} value
 * @return {!proto.PushFrame} returns this
*/
proto.PushFrame.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.PushHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PushHeader}
 */
proto.PushFrame.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.PushHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PushFrame} returns this
 */
proto.PushFrame.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * optional string payloadEncoding = 6;
 * @return {string}
 */
proto.PushFrame.prototype.getPayloadencoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.PushFrame} returns this
 */
proto.PushFrame.prototype.setPayloadencoding = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string payloadtype = 7;
 * @return {string}
 */
proto.PushFrame.prototype.getPayloadtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.PushFrame} returns this
 */
proto.PushFrame.prototype.setPayloadtype = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes payload = 8;
 * @return {!(string|Uint8Array)}
 */
proto.PushFrame.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes payload = 8;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.PushFrame.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.PushFrame.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.PushFrame} returns this
 */
proto.PushFrame.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PushHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.PushHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PushHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PushHeader}
 */
proto.PushHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PushHeader;
  return proto.PushHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PushHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PushHeader}
 */
proto.PushHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PushHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PushHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PushHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.PushHeader.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PushHeader} returns this
 */
proto.PushHeader.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.PushHeader.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PushHeader} returns this
 */
proto.PushHeader.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.Message.toObject, includeInstance),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fetchinterval: jspb.Message.getFieldWithDefault(msg, 3, 0),
    now: jspb.Message.getFieldWithDefault(msg, 4, 0),
    internalext: jspb.Message.getFieldWithDefault(msg, 5, ""),
    fetchtype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    routeparamsMap: (f = msg.getRouteparamsMap()) ? f.toObject(includeInstance, undefined) : [],
    heartbeatduration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    needack: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    pushserver: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response;
  return proto.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Message;
      reader.readMessage(value,proto.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFetchinterval(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNow(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInternalext(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFetchtype(value);
      break;
    case 7:
      var value = msg.getRouteparamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeartbeatduration(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedack(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPushserver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Message.serializeBinaryToWriter
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFetchinterval();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNow();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getInternalext();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFetchtype();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getRouteparamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getHeartbeatduration();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getNeedack();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getPushserver();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array<!proto.Message>}
 */
proto.Response.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Message, 1));
};


/**
 * @param {!Array<!proto.Message>} value
 * @return {!proto.Response} returns this
*/
proto.Response.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Message}
 */
proto.Response.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * optional string cursor = 2;
 * @return {string}
 */
proto.Response.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 fetchInterval = 3;
 * @return {number}
 */
proto.Response.prototype.getFetchinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setFetchinterval = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 now = 4;
 * @return {number}
 */
proto.Response.prototype.getNow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setNow = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string internalExt = 5;
 * @return {string}
 */
proto.Response.prototype.getInternalext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setInternalext = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 fetchType = 6;
 * @return {number}
 */
proto.Response.prototype.getFetchtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setFetchtype = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * map<string, string> routeParams = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.Response.prototype.getRouteparamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.clearRouteparamsMap = function() {
  this.getRouteparamsMap().clear();
  return this;};


/**
 * optional int64 heartbeatDuration = 8;
 * @return {number}
 */
proto.Response.prototype.getHeartbeatduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setHeartbeatduration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool needAck = 9;
 * @return {boolean}
 */
proto.Response.prototype.getNeedack = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setNeedack = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string pushServer = 10;
 * @return {string}
 */
proto.Response.prototype.getPushserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.setPushserver = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payload: msg.getPayload_asB64(),
    msgid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    msgtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgtype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMsgtype();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.Message.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Message.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.Message.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.Message.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 msgId = 3;
 * @return {number}
 */
proto.Message.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setMsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 msgType = 4;
 * @return {number}
 */
proto.Message.prototype.getMsgtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setMsgtype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 offset = 5;
 * @return {number}
 */
proto.Message.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RoomUserSeqMessage.repeatedFields_ = [2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomUserSeqMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomUserSeqMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomUserSeqMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomUserSeqMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.Common.toObject(includeInstance, f),
    ranksList: jspb.Message.toObjectList(msg.getRanksList(),
    proto.RoomUserSeqMessage.Contributor.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 3, 0),
    popstr: jspb.Message.getFieldWithDefault(msg, 4, ""),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.RoomUserSeqMessage.Contributor.toObject, includeInstance),
    popularity: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totaluser: jspb.Message.getFieldWithDefault(msg, 7, 0),
    totaluserstr: jspb.Message.getFieldWithDefault(msg, 8, ""),
    totalstr: jspb.Message.getFieldWithDefault(msg, 9, ""),
    onlineuserforanchor: jspb.Message.getFieldWithDefault(msg, 10, ""),
    totalpvforanchor: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomUserSeqMessage}
 */
proto.RoomUserSeqMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomUserSeqMessage;
  return proto.RoomUserSeqMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomUserSeqMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomUserSeqMessage}
 */
proto.RoomUserSeqMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = new proto.RoomUserSeqMessage.Contributor;
      reader.readMessage(value,proto.RoomUserSeqMessage.Contributor.deserializeBinaryFromReader);
      msg.addRanks(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPopstr(value);
      break;
    case 5:
      var value = new proto.RoomUserSeqMessage.Contributor;
      reader.readMessage(value,proto.RoomUserSeqMessage.Contributor.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPopularity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotaluser(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotaluserstr(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalstr(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnlineuserforanchor(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalpvforanchor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomUserSeqMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomUserSeqMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomUserSeqMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomUserSeqMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getRanksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.RoomUserSeqMessage.Contributor.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPopstr();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.RoomUserSeqMessage.Contributor.serializeBinaryToWriter
    );
  }
  f = message.getPopularity();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTotaluser();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTotaluserstr();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTotalstr();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getOnlineuserforanchor();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTotalpvforanchor();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomUserSeqMessage.Contributor.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomUserSeqMessage.Contributor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomUserSeqMessage.Contributor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomUserSeqMessage.Contributor.toObject = function(includeInstance, msg) {
  var f, obj = {
    score: jspb.Message.getFieldWithDefault(msg, 1, 0),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f),
    rank: jspb.Message.getFieldWithDefault(msg, 3, 0),
    delta: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ishidden: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    scoredescription: jspb.Message.getFieldWithDefault(msg, 6, ""),
    exactlyscore: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomUserSeqMessage.Contributor}
 */
proto.RoomUserSeqMessage.Contributor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomUserSeqMessage.Contributor;
  return proto.RoomUserSeqMessage.Contributor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomUserSeqMessage.Contributor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomUserSeqMessage.Contributor}
 */
proto.RoomUserSeqMessage.Contributor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScore(value);
      break;
    case 2:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRank(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelta(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIshidden(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setScoredescription(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setExactlyscore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomUserSeqMessage.Contributor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomUserSeqMessage.Contributor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomUserSeqMessage.Contributor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomUserSeqMessage.Contributor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getRank();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDelta();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getIshidden();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getScoredescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getExactlyscore();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int64 score = 1;
 * @return {number}
 */
proto.RoomUserSeqMessage.Contributor.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomUserSeqMessage.Contributor} returns this
 */
proto.RoomUserSeqMessage.Contributor.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional User user = 2;
 * @return {?proto.User}
 */
proto.RoomUserSeqMessage.Contributor.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 2));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.RoomUserSeqMessage.Contributor} returns this
*/
proto.RoomUserSeqMessage.Contributor.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RoomUserSeqMessage.Contributor} returns this
 */
proto.RoomUserSeqMessage.Contributor.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RoomUserSeqMessage.Contributor.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 rank = 3;
 * @return {number}
 */
proto.RoomUserSeqMessage.Contributor.prototype.getRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomUserSeqMessage.Contributor} returns this
 */
proto.RoomUserSeqMessage.Contributor.prototype.setRank = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 delta = 4;
 * @return {number}
 */
proto.RoomUserSeqMessage.Contributor.prototype.getDelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomUserSeqMessage.Contributor} returns this
 */
proto.RoomUserSeqMessage.Contributor.prototype.setDelta = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool isHidden = 5;
 * @return {boolean}
 */
proto.RoomUserSeqMessage.Contributor.prototype.getIshidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RoomUserSeqMessage.Contributor} returns this
 */
proto.RoomUserSeqMessage.Contributor.prototype.setIshidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string scoreDescription = 6;
 * @return {string}
 */
proto.RoomUserSeqMessage.Contributor.prototype.getScoredescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomUserSeqMessage.Contributor} returns this
 */
proto.RoomUserSeqMessage.Contributor.prototype.setScoredescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string exactlyScore = 7;
 * @return {string}
 */
proto.RoomUserSeqMessage.Contributor.prototype.getExactlyscore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomUserSeqMessage.Contributor} returns this
 */
proto.RoomUserSeqMessage.Contributor.prototype.setExactlyscore = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Common common = 1;
 * @return {?proto.Common}
 */
proto.RoomUserSeqMessage.prototype.getCommon = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.RoomUserSeqMessage} returns this
*/
proto.RoomUserSeqMessage.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RoomUserSeqMessage.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Contributor ranks = 2;
 * @return {!Array<!proto.RoomUserSeqMessage.Contributor>}
 */
proto.RoomUserSeqMessage.prototype.getRanksList = function() {
  return /** @type{!Array<!proto.RoomUserSeqMessage.Contributor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RoomUserSeqMessage.Contributor, 2));
};


/**
 * @param {!Array<!proto.RoomUserSeqMessage.Contributor>} value
 * @return {!proto.RoomUserSeqMessage} returns this
*/
proto.RoomUserSeqMessage.prototype.setRanksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.RoomUserSeqMessage.Contributor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RoomUserSeqMessage.Contributor}
 */
proto.RoomUserSeqMessage.prototype.addRanks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.RoomUserSeqMessage.Contributor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.clearRanksList = function() {
  return this.setRanksList([]);
};


/**
 * optional int64 total = 3;
 * @return {number}
 */
proto.RoomUserSeqMessage.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string popStr = 4;
 * @return {string}
 */
proto.RoomUserSeqMessage.prototype.getPopstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.setPopstr = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Contributor seats = 5;
 * @return {!Array<!proto.RoomUserSeqMessage.Contributor>}
 */
proto.RoomUserSeqMessage.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.RoomUserSeqMessage.Contributor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RoomUserSeqMessage.Contributor, 5));
};


/**
 * @param {!Array<!proto.RoomUserSeqMessage.Contributor>} value
 * @return {!proto.RoomUserSeqMessage} returns this
*/
proto.RoomUserSeqMessage.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.RoomUserSeqMessage.Contributor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RoomUserSeqMessage.Contributor}
 */
proto.RoomUserSeqMessage.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.RoomUserSeqMessage.Contributor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};


/**
 * optional int64 popularity = 6;
 * @return {number}
 */
proto.RoomUserSeqMessage.prototype.getPopularity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.setPopularity = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 totalUser = 7;
 * @return {number}
 */
proto.RoomUserSeqMessage.prototype.getTotaluser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.setTotaluser = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string totalUserStr = 8;
 * @return {string}
 */
proto.RoomUserSeqMessage.prototype.getTotaluserstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.setTotaluserstr = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string totalStr = 9;
 * @return {string}
 */
proto.RoomUserSeqMessage.prototype.getTotalstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.setTotalstr = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string onlineUserForAnchor = 10;
 * @return {string}
 */
proto.RoomUserSeqMessage.prototype.getOnlineuserforanchor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.setOnlineuserforanchor = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string totalPvForAnchor = 11;
 * @return {string}
 */
proto.RoomUserSeqMessage.prototype.getTotalpvforanchor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomUserSeqMessage} returns this
 */
proto.RoomUserSeqMessage.prototype.setTotalpvforanchor = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.Common.toObject(includeInstance, f),
    giftid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fanticketcount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    repeatcount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    combocount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f),
    touser: (f = msg.getTouser()) && proto.User.toObject(includeInstance, f),
    repeatend: jspb.Message.getFieldWithDefault(msg, 9, 0),
    texteffect: (f = msg.getTexteffect()) && proto.GiftMessage.TextEffect.toObject(includeInstance, f),
    groupid: jspb.Message.getFieldWithDefault(msg, 11, 0),
    incometaskgifts: jspb.Message.getFieldWithDefault(msg, 12, 0),
    roomfanticketcount: jspb.Message.getFieldWithDefault(msg, 13, 0),
    priority: (f = msg.getPriority()) && proto.GiftIMPriority.toObject(includeInstance, f),
    gift: (f = msg.getGift()) && proto.GiftStruct.toObject(includeInstance, f),
    logid: jspb.Message.getFieldWithDefault(msg, 16, ""),
    sendtype: jspb.Message.getFieldWithDefault(msg, 17, 0),
    publicareacommon: (f = msg.getPublicareacommon()) && proto.PublicAreaCommon.toObject(includeInstance, f),
    traydisplaytext: (f = msg.getTraydisplaytext()) && proto.Text.toObject(includeInstance, f),
    banneddisplayeffects: jspb.Message.getFieldWithDefault(msg, 20, 0),
    trayinfo: (f = msg.getTrayinfo()) && proto.GiftTrayInfo.toObject(includeInstance, f),
    asseteffectmixinfo: (f = msg.getAsseteffectmixinfo()) && proto.AssetEffectMixInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftMessage}
 */
proto.GiftMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftMessage;
  return proto.GiftMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftMessage}
 */
proto.GiftMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGiftid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFanticketcount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGroupcount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRepeatcount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCombocount(value);
      break;
    case 7:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 8:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setTouser(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRepeatend(value);
      break;
    case 10:
      var value = new proto.GiftMessage.TextEffect;
      reader.readMessage(value,proto.GiftMessage.TextEffect.deserializeBinaryFromReader);
      msg.setTexteffect(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGroupid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIncometaskgifts(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoomfanticketcount(value);
      break;
    case 14:
      var value = new proto.GiftIMPriority;
      reader.readMessage(value,proto.GiftIMPriority.deserializeBinaryFromReader);
      msg.setPriority(value);
      break;
    case 15:
      var value = new proto.GiftStruct;
      reader.readMessage(value,proto.GiftStruct.deserializeBinaryFromReader);
      msg.setGift(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogid(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendtype(value);
      break;
    case 18:
      var value = new proto.PublicAreaCommon;
      reader.readMessage(value,proto.PublicAreaCommon.deserializeBinaryFromReader);
      msg.setPublicareacommon(value);
      break;
    case 19:
      var value = new proto.Text;
      reader.readMessage(value,proto.Text.deserializeBinaryFromReader);
      msg.setTraydisplaytext(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBanneddisplayeffects(value);
      break;
    case 21:
      var value = new proto.GiftTrayInfo;
      reader.readMessage(value,proto.GiftTrayInfo.deserializeBinaryFromReader);
      msg.setTrayinfo(value);
      break;
    case 24:
      var value = new proto.AssetEffectMixInfo;
      reader.readMessage(value,proto.AssetEffectMixInfo.deserializeBinaryFromReader);
      msg.setAsseteffectmixinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getGiftid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFanticketcount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getGroupcount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRepeatcount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCombocount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getTouser();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getRepeatend();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getTexteffect();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.GiftMessage.TextEffect.serializeBinaryToWriter
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getIncometaskgifts();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getRoomfanticketcount();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getPriority();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.GiftIMPriority.serializeBinaryToWriter
    );
  }
  f = message.getGift();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.GiftStruct.serializeBinaryToWriter
    );
  }
  f = message.getLogid();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getSendtype();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getPublicareacommon();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.PublicAreaCommon.serializeBinaryToWriter
    );
  }
  f = message.getTraydisplaytext();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.Text.serializeBinaryToWriter
    );
  }
  f = message.getBanneddisplayeffects();
  if (f !== 0) {
    writer.writeInt64(
      20,
      f
    );
  }
  f = message.getTrayinfo();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.GiftTrayInfo.serializeBinaryToWriter
    );
  }
  f = message.getAsseteffectmixinfo();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.AssetEffectMixInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftMessage.TextEffect.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftMessage.TextEffect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftMessage.TextEffect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftMessage.TextEffect.toObject = function(includeInstance, msg) {
  var f, obj = {
    portrait: (f = msg.getPortrait()) && proto.GiftMessage.TextEffect.Detail.toObject(includeInstance, f),
    landscape: (f = msg.getLandscape()) && proto.GiftMessage.TextEffect.Detail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftMessage.TextEffect}
 */
proto.GiftMessage.TextEffect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftMessage.TextEffect;
  return proto.GiftMessage.TextEffect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftMessage.TextEffect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftMessage.TextEffect}
 */
proto.GiftMessage.TextEffect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GiftMessage.TextEffect.Detail;
      reader.readMessage(value,proto.GiftMessage.TextEffect.Detail.deserializeBinaryFromReader);
      msg.setPortrait(value);
      break;
    case 2:
      var value = new proto.GiftMessage.TextEffect.Detail;
      reader.readMessage(value,proto.GiftMessage.TextEffect.Detail.deserializeBinaryFromReader);
      msg.setLandscape(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftMessage.TextEffect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftMessage.TextEffect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftMessage.TextEffect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftMessage.TextEffect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortrait();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GiftMessage.TextEffect.Detail.serializeBinaryToWriter
    );
  }
  f = message.getLandscape();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GiftMessage.TextEffect.Detail.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftMessage.TextEffect.Detail.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftMessage.TextEffect.Detail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftMessage.TextEffect.Detail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftMessage.TextEffect.Detail.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: (f = msg.getText()) && proto.Text.toObject(includeInstance, f),
    textfontsize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    background: (f = msg.getBackground()) && proto.Image.toObject(includeInstance, f),
    start: jspb.Message.getFieldWithDefault(msg, 4, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 5, 0),
    x: jspb.Message.getFieldWithDefault(msg, 6, 0),
    y: jspb.Message.getFieldWithDefault(msg, 7, 0),
    width: jspb.Message.getFieldWithDefault(msg, 8, 0),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0),
    shadowdx: jspb.Message.getFieldWithDefault(msg, 10, 0),
    shadowdy: jspb.Message.getFieldWithDefault(msg, 11, 0),
    shadowradius: jspb.Message.getFieldWithDefault(msg, 12, 0),
    shadowcolor: jspb.Message.getFieldWithDefault(msg, 13, ""),
    strokecolor: jspb.Message.getFieldWithDefault(msg, 14, ""),
    strokewidth: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftMessage.TextEffect.Detail}
 */
proto.GiftMessage.TextEffect.Detail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftMessage.TextEffect.Detail;
  return proto.GiftMessage.TextEffect.Detail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftMessage.TextEffect.Detail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftMessage.TextEffect.Detail}
 */
proto.GiftMessage.TextEffect.Detail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Text;
      reader.readMessage(value,proto.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTextfontsize(value);
      break;
    case 3:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBackground(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShadowdx(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShadowdy(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShadowradius(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setShadowcolor(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrokecolor(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStrokewidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftMessage.TextEffect.Detail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftMessage.TextEffect.Detail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftMessage.TextEffect.Detail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftMessage.TextEffect.Detail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Text.serializeBinaryToWriter
    );
  }
  f = message.getTextfontsize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBackground();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getShadowdx();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getShadowdy();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getShadowradius();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getShadowcolor();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getStrokecolor();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getStrokewidth();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
};


/**
 * optional Text text = 1;
 * @return {?proto.Text}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getText = function() {
  return /** @type{?proto.Text} */ (
    jspb.Message.getWrapperField(this, proto.Text, 1));
};


/**
 * @param {?proto.Text|undefined} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
*/
proto.GiftMessage.TextEffect.Detail.prototype.setText = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.TextEffect.Detail.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 textFontSize = 2;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getTextfontsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setTextfontsize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Image background = 3;
 * @return {?proto.Image}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getBackground = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 3));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
*/
proto.GiftMessage.TextEffect.Detail.prototype.setBackground = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.clearBackground = function() {
  return this.setBackground(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.TextEffect.Detail.prototype.hasBackground = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 start = 4;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 duration = 5;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 x = 6;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 y = 7;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 width = 8;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 height = 9;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 shadowDx = 10;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getShadowdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setShadowdx = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 shadowDy = 11;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getShadowdy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setShadowdy = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 shadowRadius = 12;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getShadowradius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setShadowradius = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string shadowColor = 13;
 * @return {string}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getShadowcolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setShadowcolor = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string strokeColor = 14;
 * @return {string}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getStrokecolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setStrokecolor = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 strokeWidth = 15;
 * @return {number}
 */
proto.GiftMessage.TextEffect.Detail.prototype.getStrokewidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage.TextEffect.Detail} returns this
 */
proto.GiftMessage.TextEffect.Detail.prototype.setStrokewidth = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional Detail portrait = 1;
 * @return {?proto.GiftMessage.TextEffect.Detail}
 */
proto.GiftMessage.TextEffect.prototype.getPortrait = function() {
  return /** @type{?proto.GiftMessage.TextEffect.Detail} */ (
    jspb.Message.getWrapperField(this, proto.GiftMessage.TextEffect.Detail, 1));
};


/**
 * @param {?proto.GiftMessage.TextEffect.Detail|undefined} value
 * @return {!proto.GiftMessage.TextEffect} returns this
*/
proto.GiftMessage.TextEffect.prototype.setPortrait = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage.TextEffect} returns this
 */
proto.GiftMessage.TextEffect.prototype.clearPortrait = function() {
  return this.setPortrait(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.TextEffect.prototype.hasPortrait = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Detail landscape = 2;
 * @return {?proto.GiftMessage.TextEffect.Detail}
 */
proto.GiftMessage.TextEffect.prototype.getLandscape = function() {
  return /** @type{?proto.GiftMessage.TextEffect.Detail} */ (
    jspb.Message.getWrapperField(this, proto.GiftMessage.TextEffect.Detail, 2));
};


/**
 * @param {?proto.GiftMessage.TextEffect.Detail|undefined} value
 * @return {!proto.GiftMessage.TextEffect} returns this
*/
proto.GiftMessage.TextEffect.prototype.setLandscape = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage.TextEffect} returns this
 */
proto.GiftMessage.TextEffect.prototype.clearLandscape = function() {
  return this.setLandscape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.TextEffect.prototype.hasLandscape = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Common common = 1;
 * @return {?proto.Common}
 */
proto.GiftMessage.prototype.getCommon = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 giftId = 2;
 * @return {number}
 */
proto.GiftMessage.prototype.getGiftid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setGiftid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 fanTicketCount = 3;
 * @return {number}
 */
proto.GiftMessage.prototype.getFanticketcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setFanticketcount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 groupCount = 4;
 * @return {number}
 */
proto.GiftMessage.prototype.getGroupcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setGroupcount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 repeatCount = 5;
 * @return {number}
 */
proto.GiftMessage.prototype.getRepeatcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setRepeatcount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 comboCount = 6;
 * @return {number}
 */
proto.GiftMessage.prototype.getCombocount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setCombocount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional User user = 7;
 * @return {?proto.User}
 */
proto.GiftMessage.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 7));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional User toUser = 8;
 * @return {?proto.User}
 */
proto.GiftMessage.prototype.getTouser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 8));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setTouser = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearTouser = function() {
  return this.setTouser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasTouser = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 repeatEnd = 9;
 * @return {number}
 */
proto.GiftMessage.prototype.getRepeatend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setRepeatend = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional TextEffect textEffect = 10;
 * @return {?proto.GiftMessage.TextEffect}
 */
proto.GiftMessage.prototype.getTexteffect = function() {
  return /** @type{?proto.GiftMessage.TextEffect} */ (
    jspb.Message.getWrapperField(this, proto.GiftMessage.TextEffect, 10));
};


/**
 * @param {?proto.GiftMessage.TextEffect|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setTexteffect = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearTexteffect = function() {
  return this.setTexteffect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasTexteffect = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 groupId = 11;
 * @return {number}
 */
proto.GiftMessage.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 incomeTaskgifts = 12;
 * @return {number}
 */
proto.GiftMessage.prototype.getIncometaskgifts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setIncometaskgifts = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 roomFanTicketCount = 13;
 * @return {number}
 */
proto.GiftMessage.prototype.getRoomfanticketcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setRoomfanticketcount = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional GiftIMPriority priority = 14;
 * @return {?proto.GiftIMPriority}
 */
proto.GiftMessage.prototype.getPriority = function() {
  return /** @type{?proto.GiftIMPriority} */ (
    jspb.Message.getWrapperField(this, proto.GiftIMPriority, 14));
};


/**
 * @param {?proto.GiftIMPriority|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setPriority = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearPriority = function() {
  return this.setPriority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasPriority = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional GiftStruct gift = 15;
 * @return {?proto.GiftStruct}
 */
proto.GiftMessage.prototype.getGift = function() {
  return /** @type{?proto.GiftStruct} */ (
    jspb.Message.getWrapperField(this, proto.GiftStruct, 15));
};


/**
 * @param {?proto.GiftStruct|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setGift = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearGift = function() {
  return this.setGift(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasGift = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string logId = 16;
 * @return {string}
 */
proto.GiftMessage.prototype.getLogid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setLogid = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional int64 sendType = 17;
 * @return {number}
 */
proto.GiftMessage.prototype.getSendtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setSendtype = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional PublicAreaCommon publicAreaCommon = 18;
 * @return {?proto.PublicAreaCommon}
 */
proto.GiftMessage.prototype.getPublicareacommon = function() {
  return /** @type{?proto.PublicAreaCommon} */ (
    jspb.Message.getWrapperField(this, proto.PublicAreaCommon, 18));
};


/**
 * @param {?proto.PublicAreaCommon|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setPublicareacommon = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearPublicareacommon = function() {
  return this.setPublicareacommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasPublicareacommon = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Text trayDisplayText = 19;
 * @return {?proto.Text}
 */
proto.GiftMessage.prototype.getTraydisplaytext = function() {
  return /** @type{?proto.Text} */ (
    jspb.Message.getWrapperField(this, proto.Text, 19));
};


/**
 * @param {?proto.Text|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setTraydisplaytext = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearTraydisplaytext = function() {
  return this.setTraydisplaytext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasTraydisplaytext = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional int64 bannedDisplayEffects = 20;
 * @return {number}
 */
proto.GiftMessage.prototype.getBanneddisplayeffects = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.setBanneddisplayeffects = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional GiftTrayInfo trayInfo = 21;
 * @return {?proto.GiftTrayInfo}
 */
proto.GiftMessage.prototype.getTrayinfo = function() {
  return /** @type{?proto.GiftTrayInfo} */ (
    jspb.Message.getWrapperField(this, proto.GiftTrayInfo, 21));
};


/**
 * @param {?proto.GiftTrayInfo|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setTrayinfo = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearTrayinfo = function() {
  return this.setTrayinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasTrayinfo = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional AssetEffectMixInfo assetEffectMixInfo = 24;
 * @return {?proto.AssetEffectMixInfo}
 */
proto.GiftMessage.prototype.getAsseteffectmixinfo = function() {
  return /** @type{?proto.AssetEffectMixInfo} */ (
    jspb.Message.getWrapperField(this, proto.AssetEffectMixInfo, 24));
};


/**
 * @param {?proto.AssetEffectMixInfo|undefined} value
 * @return {!proto.GiftMessage} returns this
*/
proto.GiftMessage.prototype.setAsseteffectmixinfo = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftMessage} returns this
 */
proto.GiftMessage.prototype.clearAsseteffectmixinfo = function() {
  return this.setAsseteffectmixinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftMessage.prototype.hasAsseteffectmixinfo = function() {
  return jspb.Message.getField(this, 24) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LikeMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.LikeMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LikeMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LikeMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.Common.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    total: jspb.Message.getFieldWithDefault(msg, 3, 0),
    color: jspb.Message.getFieldWithDefault(msg, 4, 0),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f),
    icon: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LikeMessage}
 */
proto.LikeMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LikeMessage;
  return proto.LikeMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LikeMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LikeMessage}
 */
proto.LikeMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setColor(value);
      break;
    case 5:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LikeMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LikeMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LikeMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LikeMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getColor();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional Common common = 1;
 * @return {?proto.Common}
 */
proto.LikeMessage.prototype.getCommon = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.LikeMessage} returns this
*/
proto.LikeMessage.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LikeMessage} returns this
 */
proto.LikeMessage.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LikeMessage.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 count = 2;
 * @return {number}
 */
proto.LikeMessage.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.LikeMessage} returns this
 */
proto.LikeMessage.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 total = 3;
 * @return {number}
 */
proto.LikeMessage.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.LikeMessage} returns this
 */
proto.LikeMessage.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 color = 4;
 * @return {number}
 */
proto.LikeMessage.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.LikeMessage} returns this
 */
proto.LikeMessage.prototype.setColor = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional User user = 5;
 * @return {?proto.User}
 */
proto.LikeMessage.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 5));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.LikeMessage} returns this
*/
proto.LikeMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LikeMessage} returns this
 */
proto.LikeMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LikeMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string icon = 6;
 * @return {string}
 */
proto.LikeMessage.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.LikeMessage} returns this
 */
proto.LikeMessage.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.Common.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    visibletosender: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    backgroundimage: (f = msg.getBackgroundimage()) && proto.Image.toObject(includeInstance, f),
    fullscreentextcolor: jspb.Message.getFieldWithDefault(msg, 6, ""),
    backgroundimagev2: (f = msg.getBackgroundimagev2()) && proto.Image.toObject(includeInstance, f),
    publicareacommon: (f = msg.getPublicareacommon()) && proto.PublicAreaCommon.toObject(includeInstance, f),
    giftimage: (f = msg.getGiftimage()) && proto.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatMessage}
 */
proto.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatMessage;
  return proto.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatMessage}
 */
proto.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisibletosender(value);
      break;
    case 5:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBackgroundimage(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullscreentextcolor(value);
      break;
    case 7:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBackgroundimagev2(value);
      break;
    case 9:
      var value = new proto.PublicAreaCommon;
      reader.readMessage(value,proto.PublicAreaCommon.deserializeBinaryFromReader);
      msg.setPublicareacommon(value);
      break;
    case 10:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setGiftimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVisibletosender();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBackgroundimage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getFullscreentextcolor();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBackgroundimagev2();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getPublicareacommon();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.PublicAreaCommon.serializeBinaryToWriter
    );
  }
  f = message.getGiftimage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional Common common = 1;
 * @return {?proto.Common}
 */
proto.ChatMessage.prototype.getCommon = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.ChatMessage} returns this
*/
proto.ChatMessage.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatMessage} returns this
 */
proto.ChatMessage.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatMessage.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.User}
 */
proto.ChatMessage.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 2));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.ChatMessage} returns this
*/
proto.ChatMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatMessage} returns this
 */
proto.ChatMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.ChatMessage.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatMessage} returns this
 */
proto.ChatMessage.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool visibleToSender = 4;
 * @return {boolean}
 */
proto.ChatMessage.prototype.getVisibletosender = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ChatMessage} returns this
 */
proto.ChatMessage.prototype.setVisibletosender = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Image backgroundImage = 5;
 * @return {?proto.Image}
 */
proto.ChatMessage.prototype.getBackgroundimage = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 5));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.ChatMessage} returns this
*/
proto.ChatMessage.prototype.setBackgroundimage = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatMessage} returns this
 */
proto.ChatMessage.prototype.clearBackgroundimage = function() {
  return this.setBackgroundimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatMessage.prototype.hasBackgroundimage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string fullScreenTextColor = 6;
 * @return {string}
 */
proto.ChatMessage.prototype.getFullscreentextcolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatMessage} returns this
 */
proto.ChatMessage.prototype.setFullscreentextcolor = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Image backgroundImageV2 = 7;
 * @return {?proto.Image}
 */
proto.ChatMessage.prototype.getBackgroundimagev2 = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 7));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.ChatMessage} returns this
*/
proto.ChatMessage.prototype.setBackgroundimagev2 = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatMessage} returns this
 */
proto.ChatMessage.prototype.clearBackgroundimagev2 = function() {
  return this.setBackgroundimagev2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatMessage.prototype.hasBackgroundimagev2 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PublicAreaCommon publicAreaCommon = 9;
 * @return {?proto.PublicAreaCommon}
 */
proto.ChatMessage.prototype.getPublicareacommon = function() {
  return /** @type{?proto.PublicAreaCommon} */ (
    jspb.Message.getWrapperField(this, proto.PublicAreaCommon, 9));
};


/**
 * @param {?proto.PublicAreaCommon|undefined} value
 * @return {!proto.ChatMessage} returns this
*/
proto.ChatMessage.prototype.setPublicareacommon = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatMessage} returns this
 */
proto.ChatMessage.prototype.clearPublicareacommon = function() {
  return this.setPublicareacommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatMessage.prototype.hasPublicareacommon = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Image giftImage = 10;
 * @return {?proto.Image}
 */
proto.ChatMessage.prototype.getGiftimage = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 10));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.ChatMessage} returns this
*/
proto.ChatMessage.prototype.setGiftimage = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatMessage} returns this
 */
proto.ChatMessage.prototype.clearGiftimage = function() {
  return this.setGiftimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatMessage.prototype.hasGiftimage = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.Common.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f),
    sharetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    action: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sharetarget: jspb.Message.getFieldWithDefault(msg, 5, ""),
    followcount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    publicareacommon: (f = msg.getPublicareacommon()) && proto.PublicAreaCommon.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMessage}
 */
proto.SocialMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMessage;
  return proto.SocialMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMessage}
 */
proto.SocialMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSharetype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSharetarget(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFollowcount(value);
      break;
    case 7:
      var value = new proto.PublicAreaCommon;
      reader.readMessage(value,proto.PublicAreaCommon.deserializeBinaryFromReader);
      msg.setPublicareacommon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getSharetype();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAction();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSharetarget();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFollowcount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPublicareacommon();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.PublicAreaCommon.serializeBinaryToWriter
    );
  }
};


/**
 * optional Common common = 1;
 * @return {?proto.Common}
 */
proto.SocialMessage.prototype.getCommon = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.SocialMessage} returns this
*/
proto.SocialMessage.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMessage} returns this
 */
proto.SocialMessage.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMessage.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.User}
 */
proto.SocialMessage.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 2));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.SocialMessage} returns this
*/
proto.SocialMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMessage} returns this
 */
proto.SocialMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 shareType = 3;
 * @return {number}
 */
proto.SocialMessage.prototype.getSharetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMessage} returns this
 */
proto.SocialMessage.prototype.setSharetype = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 action = 4;
 * @return {number}
 */
proto.SocialMessage.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMessage} returns this
 */
proto.SocialMessage.prototype.setAction = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string shareTarget = 5;
 * @return {string}
 */
proto.SocialMessage.prototype.getSharetarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMessage} returns this
 */
proto.SocialMessage.prototype.setSharetarget = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 followCount = 6;
 * @return {number}
 */
proto.SocialMessage.prototype.getFollowcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMessage} returns this
 */
proto.SocialMessage.prototype.setFollowcount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional PublicAreaCommon publicAreaCommon = 7;
 * @return {?proto.PublicAreaCommon}
 */
proto.SocialMessage.prototype.getPublicareacommon = function() {
  return /** @type{?proto.PublicAreaCommon} */ (
    jspb.Message.getWrapperField(this, proto.PublicAreaCommon, 7));
};


/**
 * @param {?proto.PublicAreaCommon|undefined} value
 * @return {!proto.SocialMessage} returns this
*/
proto.SocialMessage.prototype.setPublicareacommon = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMessage} returns this
 */
proto.SocialMessage.prototype.clearPublicareacommon = function() {
  return this.setPublicareacommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMessage.prototype.hasPublicareacommon = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MemberMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.MemberMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MemberMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemberMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.Common.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f),
    membercount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    operator: (f = msg.getOperator()) && proto.User.toObject(includeInstance, f),
    issettoadmin: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    istopuser: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    rankscore: jspb.Message.getFieldWithDefault(msg, 7, 0),
    topuserno: jspb.Message.getFieldWithDefault(msg, 8, 0),
    entertype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    action: jspb.Message.getFieldWithDefault(msg, 10, 0),
    actiondescription: jspb.Message.getFieldWithDefault(msg, 11, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    effectconfig: (f = msg.getEffectconfig()) && proto.MemberMessage.EffectConfig.toObject(includeInstance, f),
    popstr: jspb.Message.getFieldWithDefault(msg, 14, ""),
    entereffectconfig: (f = msg.getEntereffectconfig()) && proto.MemberMessage.EffectConfig.toObject(includeInstance, f),
    backgroundimage: (f = msg.getBackgroundimage()) && proto.Image.toObject(includeInstance, f),
    backgroundimagev2: (f = msg.getBackgroundimagev2()) && proto.Image.toObject(includeInstance, f),
    anchordisplaytext: (f = msg.getAnchordisplaytext()) && proto.Text.toObject(includeInstance, f),
    publicareacommon: (f = msg.getPublicareacommon()) && proto.PublicAreaCommon.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MemberMessage}
 */
proto.MemberMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MemberMessage;
  return proto.MemberMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MemberMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MemberMessage}
 */
proto.MemberMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMembercount(value);
      break;
    case 4:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setOperator(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssettoadmin(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIstopuser(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRankscore(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTopuserno(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEntertype(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAction(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setActiondescription(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 13:
      var value = new proto.MemberMessage.EffectConfig;
      reader.readMessage(value,proto.MemberMessage.EffectConfig.deserializeBinaryFromReader);
      msg.setEffectconfig(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPopstr(value);
      break;
    case 15:
      var value = new proto.MemberMessage.EffectConfig;
      reader.readMessage(value,proto.MemberMessage.EffectConfig.deserializeBinaryFromReader);
      msg.setEntereffectconfig(value);
      break;
    case 16:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBackgroundimage(value);
      break;
    case 17:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBackgroundimagev2(value);
      break;
    case 18:
      var value = new proto.Text;
      reader.readMessage(value,proto.Text.deserializeBinaryFromReader);
      msg.setAnchordisplaytext(value);
      break;
    case 19:
      var value = new proto.PublicAreaCommon;
      reader.readMessage(value,proto.PublicAreaCommon.deserializeBinaryFromReader);
      msg.setPublicareacommon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MemberMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MemberMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MemberMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemberMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getMembercount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOperator();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getIssettoadmin();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIstopuser();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getRankscore();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTopuserno();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getEntertype();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getAction();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getActiondescription();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getEffectconfig();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.MemberMessage.EffectConfig.serializeBinaryToWriter
    );
  }
  f = message.getPopstr();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getEntereffectconfig();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.MemberMessage.EffectConfig.serializeBinaryToWriter
    );
  }
  f = message.getBackgroundimage();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getBackgroundimagev2();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getAnchordisplaytext();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.Text.serializeBinaryToWriter
    );
  }
  f = message.getPublicareacommon();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.PublicAreaCommon.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MemberMessage.EffectConfig.repeatedFields_ = [9,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MemberMessage.EffectConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.MemberMessage.EffectConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MemberMessage.EffectConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemberMessage.EffectConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    icon: (f = msg.getIcon()) && proto.Image.toObject(includeInstance, f),
    avatarpos: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: (f = msg.getText()) && proto.Text.toObject(includeInstance, f),
    texticon: (f = msg.getTexticon()) && proto.Image.toObject(includeInstance, f),
    staytime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    animassetid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    badge: (f = msg.getBadge()) && proto.Image.toObject(includeInstance, f),
    flexsettingsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    texticonoverlay: (f = msg.getTexticonoverlay()) && proto.Image.toObject(includeInstance, f),
    animatedbadge: (f = msg.getAnimatedbadge()) && proto.Image.toObject(includeInstance, f),
    hassweeplight: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    textflexsettingsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    centeranimassetid: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MemberMessage.EffectConfig}
 */
proto.MemberMessage.EffectConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MemberMessage.EffectConfig;
  return proto.MemberMessage.EffectConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MemberMessage.EffectConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MemberMessage.EffectConfig}
 */
proto.MemberMessage.EffectConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setIcon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAvatarpos(value);
      break;
    case 4:
      var value = new proto.Text;
      reader.readMessage(value,proto.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 5:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setTexticon(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStaytime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnimassetid(value);
      break;
    case 8:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBadge(value);
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFlexsettings(values[i]);
      }
      break;
    case 10:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setTexticonoverlay(value);
      break;
    case 11:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setAnimatedbadge(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHassweeplight(value);
      break;
    case 13:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTextflexsettings(values[i]);
      }
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCenteranimassetid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MemberMessage.EffectConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MemberMessage.EffectConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MemberMessage.EffectConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemberMessage.EffectConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIcon();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getAvatarpos();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Text.serializeBinaryToWriter
    );
  }
  f = message.getTexticon();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getStaytime();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAnimassetid();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getBadge();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getFlexsettingsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      9,
      f
    );
  }
  f = message.getTexticonoverlay();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getAnimatedbadge();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getHassweeplight();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getTextflexsettingsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      13,
      f
    );
  }
  f = message.getCenteranimassetid();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * optional int64 type = 1;
 * @return {number}
 */
proto.MemberMessage.EffectConfig.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Image icon = 2;
 * @return {?proto.Image}
 */
proto.MemberMessage.EffectConfig.prototype.getIcon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 2));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
*/
proto.MemberMessage.EffectConfig.prototype.setIcon = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.clearIcon = function() {
  return this.setIcon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.EffectConfig.prototype.hasIcon = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 avatarPos = 3;
 * @return {number}
 */
proto.MemberMessage.EffectConfig.prototype.getAvatarpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.setAvatarpos = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Text text = 4;
 * @return {?proto.Text}
 */
proto.MemberMessage.EffectConfig.prototype.getText = function() {
  return /** @type{?proto.Text} */ (
    jspb.Message.getWrapperField(this, proto.Text, 4));
};


/**
 * @param {?proto.Text|undefined} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
*/
proto.MemberMessage.EffectConfig.prototype.setText = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.EffectConfig.prototype.hasText = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Image textIcon = 5;
 * @return {?proto.Image}
 */
proto.MemberMessage.EffectConfig.prototype.getTexticon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 5));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
*/
proto.MemberMessage.EffectConfig.prototype.setTexticon = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.clearTexticon = function() {
  return this.setTexticon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.EffectConfig.prototype.hasTexticon = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 stayTime = 6;
 * @return {number}
 */
proto.MemberMessage.EffectConfig.prototype.getStaytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.setStaytime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 animAssetId = 7;
 * @return {number}
 */
proto.MemberMessage.EffectConfig.prototype.getAnimassetid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.setAnimassetid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Image badge = 8;
 * @return {?proto.Image}
 */
proto.MemberMessage.EffectConfig.prototype.getBadge = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 8));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
*/
proto.MemberMessage.EffectConfig.prototype.setBadge = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.clearBadge = function() {
  return this.setBadge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.EffectConfig.prototype.hasBadge = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated int64 flexSettings = 9;
 * @return {!Array<number>}
 */
proto.MemberMessage.EffectConfig.prototype.getFlexsettingsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.setFlexsettingsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.addFlexsettings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.clearFlexsettingsList = function() {
  return this.setFlexsettingsList([]);
};


/**
 * optional Image textIconOverlay = 10;
 * @return {?proto.Image}
 */
proto.MemberMessage.EffectConfig.prototype.getTexticonoverlay = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 10));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
*/
proto.MemberMessage.EffectConfig.prototype.setTexticonoverlay = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.clearTexticonoverlay = function() {
  return this.setTexticonoverlay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.EffectConfig.prototype.hasTexticonoverlay = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Image animatedBadge = 11;
 * @return {?proto.Image}
 */
proto.MemberMessage.EffectConfig.prototype.getAnimatedbadge = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 11));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
*/
proto.MemberMessage.EffectConfig.prototype.setAnimatedbadge = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.clearAnimatedbadge = function() {
  return this.setAnimatedbadge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.EffectConfig.prototype.hasAnimatedbadge = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool hasSweepLight = 12;
 * @return {boolean}
 */
proto.MemberMessage.EffectConfig.prototype.getHassweeplight = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.setHassweeplight = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * repeated int64 textFlexSettings = 13;
 * @return {!Array<number>}
 */
proto.MemberMessage.EffectConfig.prototype.getTextflexsettingsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.setTextflexsettingsList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.addTextflexsettings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.clearTextflexsettingsList = function() {
  return this.setTextflexsettingsList([]);
};


/**
 * optional int64 centerAnimAssetId = 14;
 * @return {number}
 */
proto.MemberMessage.EffectConfig.prototype.getCenteranimassetid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage.EffectConfig} returns this
 */
proto.MemberMessage.EffectConfig.prototype.setCenteranimassetid = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional Common common = 1;
 * @return {?proto.Common}
 */
proto.MemberMessage.prototype.getCommon = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.MemberMessage} returns this
*/
proto.MemberMessage.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.User}
 */
proto.MemberMessage.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 2));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.MemberMessage} returns this
*/
proto.MemberMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 memberCount = 3;
 * @return {number}
 */
proto.MemberMessage.prototype.getMembercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setMembercount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional User operator = 4;
 * @return {?proto.User}
 */
proto.MemberMessage.prototype.getOperator = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 4));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.MemberMessage} returns this
*/
proto.MemberMessage.prototype.setOperator = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.clearOperator = function() {
  return this.setOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool isSetToAdmin = 5;
 * @return {boolean}
 */
proto.MemberMessage.prototype.getIssettoadmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setIssettoadmin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool isTopUser = 6;
 * @return {boolean}
 */
proto.MemberMessage.prototype.getIstopuser = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setIstopuser = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int64 rankScore = 7;
 * @return {number}
 */
proto.MemberMessage.prototype.getRankscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setRankscore = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 topUserNo = 8;
 * @return {number}
 */
proto.MemberMessage.prototype.getTopuserno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setTopuserno = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 enterType = 9;
 * @return {number}
 */
proto.MemberMessage.prototype.getEntertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setEntertype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 action = 10;
 * @return {number}
 */
proto.MemberMessage.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setAction = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string actionDescription = 11;
 * @return {string}
 */
proto.MemberMessage.prototype.getActiondescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setActiondescription = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int64 userId = 12;
 * @return {number}
 */
proto.MemberMessage.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional EffectConfig effectConfig = 13;
 * @return {?proto.MemberMessage.EffectConfig}
 */
proto.MemberMessage.prototype.getEffectconfig = function() {
  return /** @type{?proto.MemberMessage.EffectConfig} */ (
    jspb.Message.getWrapperField(this, proto.MemberMessage.EffectConfig, 13));
};


/**
 * @param {?proto.MemberMessage.EffectConfig|undefined} value
 * @return {!proto.MemberMessage} returns this
*/
proto.MemberMessage.prototype.setEffectconfig = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.clearEffectconfig = function() {
  return this.setEffectconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.prototype.hasEffectconfig = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string popStr = 14;
 * @return {string}
 */
proto.MemberMessage.prototype.getPopstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.setPopstr = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional EffectConfig enterEffectConfig = 15;
 * @return {?proto.MemberMessage.EffectConfig}
 */
proto.MemberMessage.prototype.getEntereffectconfig = function() {
  return /** @type{?proto.MemberMessage.EffectConfig} */ (
    jspb.Message.getWrapperField(this, proto.MemberMessage.EffectConfig, 15));
};


/**
 * @param {?proto.MemberMessage.EffectConfig|undefined} value
 * @return {!proto.MemberMessage} returns this
*/
proto.MemberMessage.prototype.setEntereffectconfig = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.clearEntereffectconfig = function() {
  return this.setEntereffectconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.prototype.hasEntereffectconfig = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Image backgroundImage = 16;
 * @return {?proto.Image}
 */
proto.MemberMessage.prototype.getBackgroundimage = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 16));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.MemberMessage} returns this
*/
proto.MemberMessage.prototype.setBackgroundimage = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.clearBackgroundimage = function() {
  return this.setBackgroundimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.prototype.hasBackgroundimage = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Image backgroundImageV2 = 17;
 * @return {?proto.Image}
 */
proto.MemberMessage.prototype.getBackgroundimagev2 = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 17));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.MemberMessage} returns this
*/
proto.MemberMessage.prototype.setBackgroundimagev2 = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.clearBackgroundimagev2 = function() {
  return this.setBackgroundimagev2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.prototype.hasBackgroundimagev2 = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Text anchorDisplayText = 18;
 * @return {?proto.Text}
 */
proto.MemberMessage.prototype.getAnchordisplaytext = function() {
  return /** @type{?proto.Text} */ (
    jspb.Message.getWrapperField(this, proto.Text, 18));
};


/**
 * @param {?proto.Text|undefined} value
 * @return {!proto.MemberMessage} returns this
*/
proto.MemberMessage.prototype.setAnchordisplaytext = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.clearAnchordisplaytext = function() {
  return this.setAnchordisplaytext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.prototype.hasAnchordisplaytext = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional PublicAreaCommon publicAreaCommon = 19;
 * @return {?proto.PublicAreaCommon}
 */
proto.MemberMessage.prototype.getPublicareacommon = function() {
  return /** @type{?proto.PublicAreaCommon} */ (
    jspb.Message.getWrapperField(this, proto.PublicAreaCommon, 19));
};


/**
 * @param {?proto.PublicAreaCommon|undefined} value
 * @return {!proto.MemberMessage} returns this
*/
proto.MemberMessage.prototype.setPublicareacommon = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MemberMessage} returns this
 */
proto.MemberMessage.prototype.clearPublicareacommon = function() {
  return this.setPublicareacommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MemberMessage.prototype.hasPublicareacommon = function() {
  return jspb.Message.getField(this, 19) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ControlMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ControlMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ControlMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControlMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.Common.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ControlMessage}
 */
proto.ControlMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ControlMessage;
  return proto.ControlMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ControlMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ControlMessage}
 */
proto.ControlMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ControlMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ControlMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ControlMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControlMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Common common = 1;
 * @return {?proto.Common}
 */
proto.ControlMessage.prototype.getCommon = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.ControlMessage} returns this
*/
proto.ControlMessage.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ControlMessage} returns this
 */
proto.ControlMessage.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ControlMessage.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.ControlMessage.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ControlMessage} returns this
 */
proto.ControlMessage.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FansclubMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.FansclubMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FansclubMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FansclubMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    commoninfo: (f = msg.getCommoninfo()) && proto.Common.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FansclubMessage}
 */
proto.FansclubMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FansclubMessage;
  return proto.FansclubMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FansclubMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FansclubMessage}
 */
proto.FansclubMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommoninfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FansclubMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FansclubMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FansclubMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FansclubMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommoninfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional Common commonInfo = 1;
 * @return {?proto.Common}
 */
proto.FansclubMessage.prototype.getCommoninfo = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.FansclubMessage} returns this
*/
proto.FansclubMessage.prototype.setCommoninfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FansclubMessage} returns this
 */
proto.FansclubMessage.prototype.clearCommoninfo = function() {
  return this.setCommoninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FansclubMessage.prototype.hasCommoninfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 type = 2;
 * @return {number}
 */
proto.FansclubMessage.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.FansclubMessage} returns this
 */
proto.FansclubMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.FansclubMessage.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.FansclubMessage} returns this
 */
proto.FansclubMessage.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional User user = 4;
 * @return {?proto.User}
 */
proto.FansclubMessage.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 4));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.FansclubMessage} returns this
*/
proto.FansclubMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FansclubMessage} returns this
 */
proto.FansclubMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FansclubMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.Common.toObject(includeInstance, f),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    supprotlandscape: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    bizscene: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomMessage}
 */
proto.RoomMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomMessage;
  return proto.RoomMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomMessage}
 */
proto.RoomMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupprotlandscape(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setBizscene(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSupprotlandscape();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBizscene();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional Common common = 1;
 * @return {?proto.Common}
 */
proto.RoomMessage.prototype.getCommon = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.RoomMessage} returns this
*/
proto.RoomMessage.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RoomMessage} returns this
 */
proto.RoomMessage.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RoomMessage.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Content = 2;
 * @return {string}
 */
proto.RoomMessage.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomMessage} returns this
 */
proto.RoomMessage.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool supprotLandscape = 3;
 * @return {boolean}
 */
proto.RoomMessage.prototype.getSupprotlandscape = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RoomMessage} returns this
 */
proto.RoomMessage.prototype.setSupprotlandscape = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string bizScene = 20;
 * @return {string}
 */
proto.RoomMessage.prototype.getBizscene = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomMessage} returns this
 */
proto.RoomMessage.prototype.setBizscene = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RoomIntroMessage.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomIntroMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomIntroMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomIntroMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomIntroMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.Common.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f),
    style: jspb.Message.getFieldWithDefault(msg, 3, 0),
    intro: jspb.Message.getFieldWithDefault(msg, 4, ""),
    labelsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomIntroMessage}
 */
proto.RoomIntroMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomIntroMessage;
  return proto.RoomIntroMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomIntroMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomIntroMessage}
 */
proto.RoomIntroMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common;
      reader.readMessage(value,proto.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStyle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntro(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomIntroMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomIntroMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomIntroMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomIntroMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getStyle();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getIntro();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional Common common = 1;
 * @return {?proto.Common}
 */
proto.RoomIntroMessage.prototype.getCommon = function() {
  return /** @type{?proto.Common} */ (
    jspb.Message.getWrapperField(this, proto.Common, 1));
};


/**
 * @param {?proto.Common|undefined} value
 * @return {!proto.RoomIntroMessage} returns this
*/
proto.RoomIntroMessage.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RoomIntroMessage} returns this
 */
proto.RoomIntroMessage.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RoomIntroMessage.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.User}
 */
proto.RoomIntroMessage.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 2));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.RoomIntroMessage} returns this
*/
proto.RoomIntroMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RoomIntroMessage} returns this
 */
proto.RoomIntroMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RoomIntroMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 style = 3;
 * @return {number}
 */
proto.RoomIntroMessage.prototype.getStyle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomIntroMessage} returns this
 */
proto.RoomIntroMessage.prototype.setStyle = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string intro = 4;
 * @return {string}
 */
proto.RoomIntroMessage.prototype.getIntro = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomIntroMessage} returns this
 */
proto.RoomIntroMessage.prototype.setIntro = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string labels = 5;
 * @return {!Array<string>}
 */
proto.RoomIntroMessage.prototype.getLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.RoomIntroMessage} returns this
 */
proto.RoomIntroMessage.prototype.setLabelsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.RoomIntroMessage} returns this
 */
proto.RoomIntroMessage.prototype.addLabels = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RoomIntroMessage} returns this
 */
proto.RoomIntroMessage.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msgid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roomid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    createtime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    monitor: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isshowmsg: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    describe: jspb.Message.getFieldWithDefault(msg, 7, ""),
    displaytext: (f = msg.getDisplaytext()) && proto.Text.toObject(includeInstance, f),
    foldtype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    anchorfoldtype: jspb.Message.getFieldWithDefault(msg, 10, 0),
    priorityscore: jspb.Message.getFieldWithDefault(msg, 11, 0),
    logid: jspb.Message.getFieldWithDefault(msg, 12, ""),
    msgprocessfilterk: jspb.Message.getFieldWithDefault(msg, 13, ""),
    msgprocessfilterv: jspb.Message.getFieldWithDefault(msg, 14, ""),
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f),
    room: (f = msg.getRoom()) && proto.Room.toObject(includeInstance, f),
    anchorfoldtypev2: jspb.Message.getFieldWithDefault(msg, 17, 0),
    processatseitimems: jspb.Message.getFieldWithDefault(msg, 18, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common}
 */
proto.Common.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common;
  return proto.Common.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common}
 */
proto.Common.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoomid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonitor(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsshowmsg(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescribe(value);
      break;
    case 8:
      var value = new proto.Text;
      reader.readMessage(value,proto.Text.deserializeBinaryFromReader);
      msg.setDisplaytext(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFoldtype(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnchorfoldtype(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPriorityscore(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgprocessfilterk(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgprocessfilterv(value);
      break;
    case 15:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 16:
      var value = new proto.Room;
      reader.readMessage(value,proto.Room.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnchorfoldtypev2(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProcessatseitimems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRoomid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMonitor();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIsshowmsg();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDescribe();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDisplaytext();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Text.serializeBinaryToWriter
    );
  }
  f = message.getFoldtype();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getAnchorfoldtype();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getPriorityscore();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getLogid();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getMsgprocessfilterk();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getMsgprocessfilterv();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.Room.serializeBinaryToWriter
    );
  }
  f = message.getAnchorfoldtypev2();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getProcessatseitimems();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.Common.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 msgId = 2;
 * @return {number}
 */
proto.Common.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setMsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 roomId = 3;
 * @return {number}
 */
proto.Common.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 createTime = 4;
 * @return {number}
 */
proto.Common.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 monitor = 5;
 * @return {number}
 */
proto.Common.prototype.getMonitor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setMonitor = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool isShowMsg = 6;
 * @return {boolean}
 */
proto.Common.prototype.getIsshowmsg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setIsshowmsg = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string describe = 7;
 * @return {string}
 */
proto.Common.prototype.getDescribe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setDescribe = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Text displayText = 8;
 * @return {?proto.Text}
 */
proto.Common.prototype.getDisplaytext = function() {
  return /** @type{?proto.Text} */ (
    jspb.Message.getWrapperField(this, proto.Text, 8));
};


/**
 * @param {?proto.Text|undefined} value
 * @return {!proto.Common} returns this
*/
proto.Common.prototype.setDisplaytext = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.clearDisplaytext = function() {
  return this.setDisplaytext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Common.prototype.hasDisplaytext = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 foldType = 9;
 * @return {number}
 */
proto.Common.prototype.getFoldtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setFoldtype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 anchorFoldType = 10;
 * @return {number}
 */
proto.Common.prototype.getAnchorfoldtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setAnchorfoldtype = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 priorityScore = 11;
 * @return {number}
 */
proto.Common.prototype.getPriorityscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setPriorityscore = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string logId = 12;
 * @return {string}
 */
proto.Common.prototype.getLogid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setLogid = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string msgProcessFilterK = 13;
 * @return {string}
 */
proto.Common.prototype.getMsgprocessfilterk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setMsgprocessfilterk = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string msgProcessFilterV = 14;
 * @return {string}
 */
proto.Common.prototype.getMsgprocessfilterv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setMsgprocessfilterv = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional User user = 15;
 * @return {?proto.User}
 */
proto.Common.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 15));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.Common} returns this
*/
proto.Common.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Common.prototype.hasUser = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Room room = 16;
 * @return {?proto.Room}
 */
proto.Common.prototype.getRoom = function() {
  return /** @type{?proto.Room} */ (
    jspb.Message.getWrapperField(this, proto.Room, 16));
};


/**
 * @param {?proto.Room|undefined} value
 * @return {!proto.Common} returns this
*/
proto.Common.prototype.setRoom = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.clearRoom = function() {
  return this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Common.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int64 anchorFoldTypeV2 = 17;
 * @return {number}
 */
proto.Common.prototype.getAnchorfoldtypev2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setAnchorfoldtypev2 = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int64 processAtSeiTimeMs = 18;
 * @return {number}
 */
proto.Common.prototype.getProcessatseitimems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common} returns this
 */
proto.Common.prototype.setProcessatseitimems = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Text.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    defaultformat: (f = msg.getDefaultformat()) && proto.TextFormat.toObject(includeInstance, f),
    piecesList: jspb.Message.toObjectList(msg.getPiecesList(),
    proto.TextPiece.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Text}
 */
proto.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Text;
  return proto.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Text}
 */
proto.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = new proto.TextFormat;
      reader.readMessage(value,proto.TextFormat.deserializeBinaryFromReader);
      msg.setDefaultformat(value);
      break;
    case 4:
      var value = new proto.TextPiece;
      reader.readMessage(value,proto.TextPiece.deserializeBinaryFromReader);
      msg.addPieces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDefaultformat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TextFormat.serializeBinaryToWriter
    );
  }
  f = message.getPiecesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.TextPiece.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.Text.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Text} returns this
 */
proto.Text.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TextFormat defaultFormat = 3;
 * @return {?proto.TextFormat}
 */
proto.Text.prototype.getDefaultformat = function() {
  return /** @type{?proto.TextFormat} */ (
    jspb.Message.getWrapperField(this, proto.TextFormat, 3));
};


/**
 * @param {?proto.TextFormat|undefined} value
 * @return {!proto.Text} returns this
*/
proto.Text.prototype.setDefaultformat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Text} returns this
 */
proto.Text.prototype.clearDefaultformat = function() {
  return this.setDefaultformat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Text.prototype.hasDefaultformat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated TextPiece pieces = 4;
 * @return {!Array<!proto.TextPiece>}
 */
proto.Text.prototype.getPiecesList = function() {
  return /** @type{!Array<!proto.TextPiece>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TextPiece, 4));
};


/**
 * @param {!Array<!proto.TextPiece>} value
 * @return {!proto.Text} returns this
*/
proto.Text.prototype.setPiecesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.TextPiece=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TextPiece}
 */
proto.Text.prototype.addPieces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.TextPiece, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Text} returns this
 */
proto.Text.prototype.clearPiecesList = function() {
  return this.setPiecesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Room.repeatedFields_ = [34,35,45];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Room.prototype.toObject = function(opt_includeInstance) {
  return proto.Room.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Room} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Room.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idstr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    owneruserid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    title: jspb.Message.getFieldWithDefault(msg, 5, ""),
    usercount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    createtime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    linkmiclayout: jspb.Message.getFieldWithDefault(msg, 8, 0),
    finishtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    extra: (f = msg.getExtra()) && proto.RoomExtra.toObject(includeInstance, f),
    dynamiccoveruri: jspb.Message.getFieldWithDefault(msg, 11, ""),
    dynamiccoverdictMap: (f = msg.getDynamiccoverdictMap()) ? f.toObject(includeInstance, undefined) : [],
    lastpingtime: jspb.Message.getFieldWithDefault(msg, 13, 0),
    liveid: jspb.Message.getFieldWithDefault(msg, 14, 0),
    streamprovider: jspb.Message.getFieldWithDefault(msg, 15, 0),
    ostype: jspb.Message.getFieldWithDefault(msg, 16, 0),
    clientversion: jspb.Message.getFieldWithDefault(msg, 17, 0),
    withlinkmic: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    enableroomperspective: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    cover: (f = msg.getCover()) && proto.Image.toObject(includeInstance, f),
    dynamiccover: (f = msg.getDynamiccover()) && proto.Image.toObject(includeInstance, f),
    dynamiccoverlow: (f = msg.getDynamiccoverlow()) && proto.Image.toObject(includeInstance, f),
    shareurl: jspb.Message.getFieldWithDefault(msg, 23, ""),
    anchorsharetext: jspb.Message.getFieldWithDefault(msg, 24, ""),
    usersharetext: jspb.Message.getFieldWithDefault(msg, 25, ""),
    streamid: jspb.Message.getFieldWithDefault(msg, 26, 0),
    streamidstr: jspb.Message.getFieldWithDefault(msg, 27, ""),
    streamurl: (f = msg.getStreamurl()) && proto.StreamUrl.toObject(includeInstance, f),
    mosaicstatus: jspb.Message.getFieldWithDefault(msg, 29, 0),
    mosaictip: jspb.Message.getFieldWithDefault(msg, 30, ""),
    cellstyle: jspb.Message.getFieldWithDefault(msg, 31, 0),
    linkmic: (f = msg.getLinkmic()) && proto.LinkMic.toObject(includeInstance, f),
    luckymoneynum: jspb.Message.getFieldWithDefault(msg, 33, 0),
    decosList: jspb.Message.toObjectList(msg.getDecosList(),
    proto.Decoration.toObject, includeInstance),
    topfansList: jspb.Message.toObjectList(msg.getTopfansList(),
    proto.TopFan.toObject, includeInstance),
    stats: (f = msg.getStats()) && proto.RoomStats.toObject(includeInstance, f),
    sundailyiconcontent: jspb.Message.getFieldWithDefault(msg, 37, ""),
    distance: jspb.Message.getFieldWithDefault(msg, 38, ""),
    distancecity: jspb.Message.getFieldWithDefault(msg, 39, ""),
    location: jspb.Message.getFieldWithDefault(msg, 40, ""),
    realdistance: jspb.Message.getFieldWithDefault(msg, 41, ""),
    feedroomlabel: (f = msg.getFeedroomlabel()) && proto.Image.toObject(includeInstance, f),
    commonlabellist: jspb.Message.getFieldWithDefault(msg, 43, ""),
    livingroomattrs: (f = msg.getLivingroomattrs()) && proto.RoomUserAttr.toObject(includeInstance, f),
    adminuseridsList: (f = jspb.Message.getRepeatedField(msg, 45)) == null ? undefined : f,
    owner: (f = msg.getOwner()) && proto.User.toObject(includeInstance, f),
    privateinfo: jspb.Message.getFieldWithDefault(msg, 47, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Room}
 */
proto.Room.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Room;
  return proto.Room.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Room} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Room}
 */
proto.Room.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdstr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOwneruserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUsercount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLinkmiclayout(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFinishtime(value);
      break;
    case 10:
      var value = new proto.RoomExtra;
      reader.readMessage(value,proto.RoomExtra.deserializeBinaryFromReader);
      msg.setExtra(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDynamiccoveruri(value);
      break;
    case 12:
      var value = msg.getDynamiccoverdictMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastpingtime(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLiveid(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStreamprovider(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOstype(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClientversion(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithlinkmic(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableroomperspective(value);
      break;
    case 20:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setCover(value);
      break;
    case 21:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setDynamiccover(value);
      break;
    case 22:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setDynamiccoverlow(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareurl(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchorsharetext(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsersharetext(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStreamid(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamidstr(value);
      break;
    case 28:
      var value = new proto.StreamUrl;
      reader.readMessage(value,proto.StreamUrl.deserializeBinaryFromReader);
      msg.setStreamurl(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMosaicstatus(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setMosaictip(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCellstyle(value);
      break;
    case 32:
      var value = new proto.LinkMic;
      reader.readMessage(value,proto.LinkMic.deserializeBinaryFromReader);
      msg.setLinkmic(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLuckymoneynum(value);
      break;
    case 34:
      var value = new proto.Decoration;
      reader.readMessage(value,proto.Decoration.deserializeBinaryFromReader);
      msg.addDecos(value);
      break;
    case 35:
      var value = new proto.TopFan;
      reader.readMessage(value,proto.TopFan.deserializeBinaryFromReader);
      msg.addTopfans(value);
      break;
    case 36:
      var value = new proto.RoomStats;
      reader.readMessage(value,proto.RoomStats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setSundailyiconcontent(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistance(value);
      break;
    case 39:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistancecity(value);
      break;
    case 40:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealdistance(value);
      break;
    case 42:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setFeedroomlabel(value);
      break;
    case 43:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommonlabellist(value);
      break;
    case 44:
      var value = new proto.RoomUserAttr;
      reader.readMessage(value,proto.RoomUserAttr.deserializeBinaryFromReader);
      msg.setLivingroomattrs(value);
      break;
    case 45:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAdminuserids(values[i]);
      }
      break;
    case 46:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 47:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Room.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Room.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Room} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Room.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIdstr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOwneruserid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUsercount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getLinkmiclayout();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getFinishtime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getExtra();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.RoomExtra.serializeBinaryToWriter
    );
  }
  f = message.getDynamiccoveruri();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDynamiccoverdictMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getLastpingtime();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getLiveid();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getStreamprovider();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getOstype();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getClientversion();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getWithlinkmic();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getEnableroomperspective();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getCover();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getDynamiccover();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getDynamiccoverlow();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getShareurl();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getAnchorsharetext();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getUsersharetext();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getStreamid();
  if (f !== 0) {
    writer.writeInt64(
      26,
      f
    );
  }
  f = message.getStreamidstr();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getStreamurl();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.StreamUrl.serializeBinaryToWriter
    );
  }
  f = message.getMosaicstatus();
  if (f !== 0) {
    writer.writeInt64(
      29,
      f
    );
  }
  f = message.getMosaictip();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getCellstyle();
  if (f !== 0) {
    writer.writeInt64(
      31,
      f
    );
  }
  f = message.getLinkmic();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.LinkMic.serializeBinaryToWriter
    );
  }
  f = message.getLuckymoneynum();
  if (f !== 0) {
    writer.writeInt64(
      33,
      f
    );
  }
  f = message.getDecosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      34,
      f,
      proto.Decoration.serializeBinaryToWriter
    );
  }
  f = message.getTopfansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      35,
      f,
      proto.TopFan.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.RoomStats.serializeBinaryToWriter
    );
  }
  f = message.getSundailyiconcontent();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = message.getDistance();
  if (f.length > 0) {
    writer.writeString(
      38,
      f
    );
  }
  f = message.getDistancecity();
  if (f.length > 0) {
    writer.writeString(
      39,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      40,
      f
    );
  }
  f = message.getRealdistance();
  if (f.length > 0) {
    writer.writeString(
      41,
      f
    );
  }
  f = message.getFeedroomlabel();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getCommonlabellist();
  if (f.length > 0) {
    writer.writeString(
      43,
      f
    );
  }
  f = message.getLivingroomattrs();
  if (f != null) {
    writer.writeMessage(
      44,
      f,
      proto.RoomUserAttr.serializeBinaryToWriter
    );
  }
  f = message.getAdminuseridsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      45,
      f
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      46,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getPrivateinfo();
  if (f.length > 0) {
    writer.writeString(
      47,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Room.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string idStr = 2;
 * @return {string}
 */
proto.Room.prototype.getIdstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setIdstr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 status = 3;
 * @return {number}
 */
proto.Room.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 ownerUserId = 4;
 * @return {number}
 */
proto.Room.prototype.getOwneruserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setOwneruserid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string title = 5;
 * @return {string}
 */
proto.Room.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 userCount = 6;
 * @return {number}
 */
proto.Room.prototype.getUsercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setUsercount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 createTime = 7;
 * @return {number}
 */
proto.Room.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 linkmicLayout = 8;
 * @return {number}
 */
proto.Room.prototype.getLinkmiclayout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setLinkmiclayout = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 finishTime = 9;
 * @return {number}
 */
proto.Room.prototype.getFinishtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setFinishtime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional RoomExtra extra = 10;
 * @return {?proto.RoomExtra}
 */
proto.Room.prototype.getExtra = function() {
  return /** @type{?proto.RoomExtra} */ (
    jspb.Message.getWrapperField(this, proto.RoomExtra, 10));
};


/**
 * @param {?proto.RoomExtra|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setExtra = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearExtra = function() {
  return this.setExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasExtra = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string dynamicCoverUri = 11;
 * @return {string}
 */
proto.Room.prototype.getDynamiccoveruri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setDynamiccoveruri = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * map<int64, string> dynamicCoverDict = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.Room.prototype.getDynamiccoverdictMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearDynamiccoverdictMap = function() {
  this.getDynamiccoverdictMap().clear();
  return this;};


/**
 * optional int64 lastPingTime = 13;
 * @return {number}
 */
proto.Room.prototype.getLastpingtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setLastpingtime = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 liveId = 14;
 * @return {number}
 */
proto.Room.prototype.getLiveid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setLiveid = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 streamProvider = 15;
 * @return {number}
 */
proto.Room.prototype.getStreamprovider = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setStreamprovider = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int64 osType = 16;
 * @return {number}
 */
proto.Room.prototype.getOstype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setOstype = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 clientVersion = 17;
 * @return {number}
 */
proto.Room.prototype.getClientversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setClientversion = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool withLinkmic = 18;
 * @return {boolean}
 */
proto.Room.prototype.getWithlinkmic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setWithlinkmic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional bool enableRoomPerspective = 19;
 * @return {boolean}
 */
proto.Room.prototype.getEnableroomperspective = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setEnableroomperspective = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional Image cover = 20;
 * @return {?proto.Image}
 */
proto.Room.prototype.getCover = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 20));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setCover = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearCover = function() {
  return this.setCover(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasCover = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Image dynamicCover = 21;
 * @return {?proto.Image}
 */
proto.Room.prototype.getDynamiccover = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 21));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setDynamiccover = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearDynamiccover = function() {
  return this.setDynamiccover(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasDynamiccover = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional Image dynamicCoverLow = 22;
 * @return {?proto.Image}
 */
proto.Room.prototype.getDynamiccoverlow = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 22));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setDynamiccoverlow = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearDynamiccoverlow = function() {
  return this.setDynamiccoverlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasDynamiccoverlow = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional string shareUrl = 23;
 * @return {string}
 */
proto.Room.prototype.getShareurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setShareurl = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string anchorShareText = 24;
 * @return {string}
 */
proto.Room.prototype.getAnchorsharetext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setAnchorsharetext = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional string userShareText = 25;
 * @return {string}
 */
proto.Room.prototype.getUsersharetext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setUsersharetext = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional int64 streamId = 26;
 * @return {number}
 */
proto.Room.prototype.getStreamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setStreamid = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional string streamIdStr = 27;
 * @return {string}
 */
proto.Room.prototype.getStreamidstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setStreamidstr = function(value) {
  return jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional StreamUrl streamUrl = 28;
 * @return {?proto.StreamUrl}
 */
proto.Room.prototype.getStreamurl = function() {
  return /** @type{?proto.StreamUrl} */ (
    jspb.Message.getWrapperField(this, proto.StreamUrl, 28));
};


/**
 * @param {?proto.StreamUrl|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setStreamurl = function(value) {
  return jspb.Message.setWrapperField(this, 28, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearStreamurl = function() {
  return this.setStreamurl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasStreamurl = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional int64 mosaicStatus = 29;
 * @return {number}
 */
proto.Room.prototype.getMosaicstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setMosaicstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional string mosaicTip = 30;
 * @return {string}
 */
proto.Room.prototype.getMosaictip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setMosaictip = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional int64 cellStyle = 31;
 * @return {number}
 */
proto.Room.prototype.getCellstyle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setCellstyle = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional LinkMic linkMic = 32;
 * @return {?proto.LinkMic}
 */
proto.Room.prototype.getLinkmic = function() {
  return /** @type{?proto.LinkMic} */ (
    jspb.Message.getWrapperField(this, proto.LinkMic, 32));
};


/**
 * @param {?proto.LinkMic|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setLinkmic = function(value) {
  return jspb.Message.setWrapperField(this, 32, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearLinkmic = function() {
  return this.setLinkmic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasLinkmic = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional int64 luckymoneyNum = 33;
 * @return {number}
 */
proto.Room.prototype.getLuckymoneynum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/**
 * @param {number} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setLuckymoneynum = function(value) {
  return jspb.Message.setProto3IntField(this, 33, value);
};


/**
 * repeated Decoration decos = 34;
 * @return {!Array<!proto.Decoration>}
 */
proto.Room.prototype.getDecosList = function() {
  return /** @type{!Array<!proto.Decoration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Decoration, 34));
};


/**
 * @param {!Array<!proto.Decoration>} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setDecosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 34, value);
};


/**
 * @param {!proto.Decoration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Decoration}
 */
proto.Room.prototype.addDecos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 34, opt_value, proto.Decoration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearDecosList = function() {
  return this.setDecosList([]);
};


/**
 * repeated TopFan topFans = 35;
 * @return {!Array<!proto.TopFan>}
 */
proto.Room.prototype.getTopfansList = function() {
  return /** @type{!Array<!proto.TopFan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TopFan, 35));
};


/**
 * @param {!Array<!proto.TopFan>} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setTopfansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 35, value);
};


/**
 * @param {!proto.TopFan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TopFan}
 */
proto.Room.prototype.addTopfans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 35, opt_value, proto.TopFan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearTopfansList = function() {
  return this.setTopfansList([]);
};


/**
 * optional RoomStats stats = 36;
 * @return {?proto.RoomStats}
 */
proto.Room.prototype.getStats = function() {
  return /** @type{?proto.RoomStats} */ (
    jspb.Message.getWrapperField(this, proto.RoomStats, 36));
};


/**
 * @param {?proto.RoomStats|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setStats = function(value) {
  return jspb.Message.setWrapperField(this, 36, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearStats = function() {
  return this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasStats = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional string sunDailyIconContent = 37;
 * @return {string}
 */
proto.Room.prototype.getSundailyiconcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setSundailyiconcontent = function(value) {
  return jspb.Message.setProto3StringField(this, 37, value);
};


/**
 * optional string distance = 38;
 * @return {string}
 */
proto.Room.prototype.getDistance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setDistance = function(value) {
  return jspb.Message.setProto3StringField(this, 38, value);
};


/**
 * optional string distanceCity = 39;
 * @return {string}
 */
proto.Room.prototype.getDistancecity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 39, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setDistancecity = function(value) {
  return jspb.Message.setProto3StringField(this, 39, value);
};


/**
 * optional string location = 40;
 * @return {string}
 */
proto.Room.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 40, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 40, value);
};


/**
 * optional string realDistance = 41;
 * @return {string}
 */
proto.Room.prototype.getRealdistance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setRealdistance = function(value) {
  return jspb.Message.setProto3StringField(this, 41, value);
};


/**
 * optional Image feedRoomLabel = 42;
 * @return {?proto.Image}
 */
proto.Room.prototype.getFeedroomlabel = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 42));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setFeedroomlabel = function(value) {
  return jspb.Message.setWrapperField(this, 42, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearFeedroomlabel = function() {
  return this.setFeedroomlabel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasFeedroomlabel = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional string commonLabelList = 43;
 * @return {string}
 */
proto.Room.prototype.getCommonlabellist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 43, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setCommonlabellist = function(value) {
  return jspb.Message.setProto3StringField(this, 43, value);
};


/**
 * optional RoomUserAttr livingRoomAttrs = 44;
 * @return {?proto.RoomUserAttr}
 */
proto.Room.prototype.getLivingroomattrs = function() {
  return /** @type{?proto.RoomUserAttr} */ (
    jspb.Message.getWrapperField(this, proto.RoomUserAttr, 44));
};


/**
 * @param {?proto.RoomUserAttr|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setLivingroomattrs = function(value) {
  return jspb.Message.setWrapperField(this, 44, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearLivingroomattrs = function() {
  return this.setLivingroomattrs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasLivingroomattrs = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * repeated int64 adminUserIds = 45;
 * @return {!Array<number>}
 */
proto.Room.prototype.getAdminuseridsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 45));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setAdminuseridsList = function(value) {
  return jspb.Message.setField(this, 45, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.addAdminuserids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 45, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearAdminuseridsList = function() {
  return this.setAdminuseridsList([]);
};


/**
 * optional User owner = 46;
 * @return {?proto.User}
 */
proto.Room.prototype.getOwner = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 46));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.Room} returns this
*/
proto.Room.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 46, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Room.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 46) != null;
};


/**
 * optional string privateInfo = 47;
 * @return {string}
 */
proto.Room.prototype.getPrivateinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 47, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setPrivateinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 47, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomExtra.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomExtra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomExtra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomExtra.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomExtra}
 */
proto.RoomExtra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomExtra;
  return proto.RoomExtra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomExtra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomExtra}
 */
proto.RoomExtra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomExtra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomExtra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomExtra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomExtra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomStats.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomStats.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomStats}
 */
proto.RoomStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomStats;
  return proto.RoomStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomStats}
 */
proto.RoomStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomUserAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomUserAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomUserAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomUserAttr.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomUserAttr}
 */
proto.RoomUserAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomUserAttr;
  return proto.RoomUserAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomUserAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomUserAttr}
 */
proto.RoomUserAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomUserAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomUserAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomUserAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomUserAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamUrl.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamUrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamUrl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamUrl.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamUrl}
 */
proto.StreamUrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamUrl;
  return proto.StreamUrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamUrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamUrl}
 */
proto.StreamUrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamUrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamUrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamUrl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamUrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LinkMic.prototype.toObject = function(opt_includeInstance) {
  return proto.LinkMic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LinkMic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LinkMic.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LinkMic}
 */
proto.LinkMic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LinkMic;
  return proto.LinkMic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LinkMic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LinkMic}
 */
proto.LinkMic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LinkMic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LinkMic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LinkMic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LinkMic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Decoration.prototype.toObject = function(opt_includeInstance) {
  return proto.Decoration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Decoration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Decoration.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Decoration}
 */
proto.Decoration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Decoration;
  return proto.Decoration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Decoration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Decoration}
 */
proto.Decoration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Decoration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Decoration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Decoration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Decoration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TopFan.prototype.toObject = function(opt_includeInstance) {
  return proto.TopFan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TopFan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopFan.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TopFan}
 */
proto.TopFan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TopFan;
  return proto.TopFan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TopFan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TopFan}
 */
proto.TopFan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TopFan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TopFan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TopFan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopFan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.User.repeatedFields_ = [29,30];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.prototype.toObject = function(opt_includeInstance) {
  return proto.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shortid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signature: jspb.Message.getFieldWithDefault(msg, 5, ""),
    level: jspb.Message.getFieldWithDefault(msg, 6, 0),
    birthday: jspb.Message.getFieldWithDefault(msg, 7, 0),
    telephone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    avatarthumb: (f = msg.getAvatarthumb()) && proto.Image.toObject(includeInstance, f),
    avatarmedium: (f = msg.getAvatarmedium()) && proto.Image.toObject(includeInstance, f),
    avatarlarge: (f = msg.getAvatarlarge()) && proto.Image.toObject(includeInstance, f),
    verified: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    experience: jspb.Message.getFieldWithDefault(msg, 13, 0),
    city: jspb.Message.getFieldWithDefault(msg, 14, ""),
    status: jspb.Message.getFieldWithDefault(msg, 15, 0),
    createtime: jspb.Message.getFieldWithDefault(msg, 16, 0),
    modifytime: jspb.Message.getFieldWithDefault(msg, 17, 0),
    secret: jspb.Message.getFieldWithDefault(msg, 18, 0),
    shareqrcodeuri: jspb.Message.getFieldWithDefault(msg, 19, ""),
    incomesharepercent: jspb.Message.getFieldWithDefault(msg, 20, 0),
    badgeimagelist: (f = msg.getBadgeimagelist()) && proto.Image.toObject(includeInstance, f),
    followinfo: (f = msg.getFollowinfo()) && proto.User.FollowInfo.toObject(includeInstance, f),
    paygrade: (f = msg.getPaygrade()) && proto.User.PayGrade.toObject(includeInstance, f),
    fansclub: (f = msg.getFansclub()) && proto.User.FansClub.toObject(includeInstance, f),
    border: (f = msg.getBorder()) && proto.User.Border.toObject(includeInstance, f),
    specialid: jspb.Message.getFieldWithDefault(msg, 26, ""),
    avatarborder: (f = msg.getAvatarborder()) && proto.Image.toObject(includeInstance, f),
    medal: (f = msg.getMedal()) && proto.Image.toObject(includeInstance, f),
    realtimeiconsList: jspb.Message.toObjectList(msg.getRealtimeiconsList(),
    proto.Image.toObject, includeInstance),
    newrealtimeiconsList: jspb.Message.toObjectList(msg.getNewrealtimeiconsList(),
    proto.Image.toObject, includeInstance),
    topvipno: jspb.Message.getFieldWithDefault(msg, 31, 0),
    userattr: (f = msg.getUserattr()) && proto.User.UserAttr.toObject(includeInstance, f),
    ownroom: (f = msg.getOwnroom()) && proto.User.OwnRoom.toObject(includeInstance, f),
    payscore: jspb.Message.getFieldWithDefault(msg, 34, 0),
    ticketcount: jspb.Message.getFieldWithDefault(msg, 35, 0),
    anchorinfo: (f = msg.getAnchorinfo()) && proto.User.AnchorInfo.toObject(includeInstance, f),
    linkmicstats: jspb.Message.getFieldWithDefault(msg, 37, 0),
    displayid: jspb.Message.getFieldWithDefault(msg, 38, ""),
    secuid: jspb.Message.getFieldWithDefault(msg, 46, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User}
 */
proto.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User;
  return proto.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User}
 */
proto.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShortid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBirthday(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelephone(value);
      break;
    case 9:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setAvatarthumb(value);
      break;
    case 10:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setAvatarmedium(value);
      break;
    case 11:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setAvatarlarge(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExperience(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModifytime(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecret(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareqrcodeuri(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIncomesharepercent(value);
      break;
    case 21:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBadgeimagelist(value);
      break;
    case 22:
      var value = new proto.User.FollowInfo;
      reader.readMessage(value,proto.User.FollowInfo.deserializeBinaryFromReader);
      msg.setFollowinfo(value);
      break;
    case 23:
      var value = new proto.User.PayGrade;
      reader.readMessage(value,proto.User.PayGrade.deserializeBinaryFromReader);
      msg.setPaygrade(value);
      break;
    case 24:
      var value = new proto.User.FansClub;
      reader.readMessage(value,proto.User.FansClub.deserializeBinaryFromReader);
      msg.setFansclub(value);
      break;
    case 25:
      var value = new proto.User.Border;
      reader.readMessage(value,proto.User.Border.deserializeBinaryFromReader);
      msg.setBorder(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpecialid(value);
      break;
    case 27:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setAvatarborder(value);
      break;
    case 28:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setMedal(value);
      break;
    case 29:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.addRealtimeicons(value);
      break;
    case 30:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.addNewrealtimeicons(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTopvipno(value);
      break;
    case 32:
      var value = new proto.User.UserAttr;
      reader.readMessage(value,proto.User.UserAttr.deserializeBinaryFromReader);
      msg.setUserattr(value);
      break;
    case 33:
      var value = new proto.User.OwnRoom;
      reader.readMessage(value,proto.User.OwnRoom.deserializeBinaryFromReader);
      msg.setOwnroom(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPayscore(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTicketcount(value);
      break;
    case 36:
      var value = new proto.User.AnchorInfo;
      reader.readMessage(value,proto.User.AnchorInfo.deserializeBinaryFromReader);
      msg.setAnchorinfo(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLinkmicstats(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayid(value);
      break;
    case 46:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getShortid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGender();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getBirthday();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTelephone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAvatarthumb();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getAvatarmedium();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getAvatarlarge();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getExperience();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getModifytime();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getSecret();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getShareqrcodeuri();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getIncomesharepercent();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getBadgeimagelist();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getFollowinfo();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.User.FollowInfo.serializeBinaryToWriter
    );
  }
  f = message.getPaygrade();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.User.PayGrade.serializeBinaryToWriter
    );
  }
  f = message.getFansclub();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.User.FansClub.serializeBinaryToWriter
    );
  }
  f = message.getBorder();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.User.Border.serializeBinaryToWriter
    );
  }
  f = message.getSpecialid();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getAvatarborder();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getMedal();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getRealtimeiconsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      29,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getNewrealtimeiconsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      30,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getTopvipno();
  if (f !== 0) {
    writer.writeInt64(
      31,
      f
    );
  }
  f = message.getUserattr();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.User.UserAttr.serializeBinaryToWriter
    );
  }
  f = message.getOwnroom();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.User.OwnRoom.serializeBinaryToWriter
    );
  }
  f = message.getPayscore();
  if (f !== 0) {
    writer.writeInt64(
      34,
      f
    );
  }
  f = message.getTicketcount();
  if (f !== 0) {
    writer.writeInt64(
      35,
      f
    );
  }
  f = message.getAnchorinfo();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.User.AnchorInfo.serializeBinaryToWriter
    );
  }
  f = message.getLinkmicstats();
  if (f !== 0) {
    writer.writeInt32(
      37,
      f
    );
  }
  f = message.getDisplayid();
  if (f.length > 0) {
    writer.writeString(
      38,
      f
    );
  }
  f = message.getSecuid();
  if (f.length > 0) {
    writer.writeString(
      46,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.UserAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.User.UserAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.UserAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.UserAttr.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.UserAttr}
 */
proto.User.UserAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.UserAttr;
  return proto.User.UserAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.UserAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.UserAttr}
 */
proto.User.UserAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.UserAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.UserAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.UserAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.UserAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.OwnRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.User.OwnRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.OwnRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.OwnRoom.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.OwnRoom}
 */
proto.User.OwnRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.OwnRoom;
  return proto.User.OwnRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.OwnRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.OwnRoom}
 */
proto.User.OwnRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.OwnRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.OwnRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.OwnRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.OwnRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.AnchorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.User.AnchorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.AnchorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.AnchorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.AnchorInfo}
 */
proto.User.AnchorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.AnchorInfo;
  return proto.User.AnchorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.AnchorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.AnchorInfo}
 */
proto.User.AnchorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.AnchorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.AnchorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.AnchorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.AnchorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.FollowInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.User.FollowInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.FollowInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.FollowInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    followingcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    followercount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    followstatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pushstatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    remarkname: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.FollowInfo}
 */
proto.User.FollowInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.FollowInfo;
  return proto.User.FollowInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.FollowInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.FollowInfo}
 */
proto.User.FollowInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFollowingcount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFollowercount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFollowstatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPushstatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemarkname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.FollowInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.FollowInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.FollowInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.FollowInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFollowingcount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getFollowercount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFollowstatus();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPushstatus();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRemarkname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int64 followingCount = 1;
 * @return {number}
 */
proto.User.FollowInfo.prototype.getFollowingcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.FollowInfo} returns this
 */
proto.User.FollowInfo.prototype.setFollowingcount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 followerCount = 2;
 * @return {number}
 */
proto.User.FollowInfo.prototype.getFollowercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.FollowInfo} returns this
 */
proto.User.FollowInfo.prototype.setFollowercount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 followStatus = 3;
 * @return {number}
 */
proto.User.FollowInfo.prototype.getFollowstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.FollowInfo} returns this
 */
proto.User.FollowInfo.prototype.setFollowstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 pushStatus = 4;
 * @return {number}
 */
proto.User.FollowInfo.prototype.getPushstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.FollowInfo} returns this
 */
proto.User.FollowInfo.prototype.setPushstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string remarkName = 5;
 * @return {string}
 */
proto.User.FollowInfo.prototype.getRemarkname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.User.FollowInfo} returns this
 */
proto.User.FollowInfo.prototype.setRemarkname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.FansClub.prototype.toObject = function(opt_includeInstance) {
  return proto.User.FansClub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.FansClub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.FansClub.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.User.FansClub.FansClubData.toObject(includeInstance, f),
    preferdataMap: (f = msg.getPreferdataMap()) ? f.toObject(includeInstance, proto.User.FansClub.FansClubData.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.FansClub}
 */
proto.User.FansClub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.FansClub;
  return proto.User.FansClub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.FansClub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.FansClub}
 */
proto.User.FansClub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.User.FansClub.FansClubData;
      reader.readMessage(value,proto.User.FansClub.FansClubData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = msg.getPreferdataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.User.FansClub.FansClubData.deserializeBinaryFromReader, 0, new proto.User.FansClub.FansClubData());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.FansClub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.FansClub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.FansClub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.FansClub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.User.FansClub.FansClubData.serializeBinaryToWriter
    );
  }
  f = message.getPreferdataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.User.FansClub.FansClubData.serializeBinaryToWriter);
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.User.FansClub.FansClubData.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.FansClub.FansClubData.prototype.toObject = function(opt_includeInstance) {
  return proto.User.FansClub.FansClubData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.FansClub.FansClubData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.FansClub.FansClubData.toObject = function(includeInstance, msg) {
  var f, obj = {
    clubname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userfansclubstatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    badge: (f = msg.getBadge()) && proto.User.FansClub.FansClubData.UserBadge.toObject(includeInstance, f),
    availablegiftidsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    anchorid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.FansClub.FansClubData}
 */
proto.User.FansClub.FansClubData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.FansClub.FansClubData;
  return proto.User.FansClub.FansClubData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.FansClub.FansClubData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.FansClub.FansClubData}
 */
proto.User.FansClub.FansClubData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClubname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserfansclubstatus(value);
      break;
    case 4:
      var value = new proto.User.FansClub.FansClubData.UserBadge;
      reader.readMessage(value,proto.User.FansClub.FansClubData.UserBadge.deserializeBinaryFromReader);
      msg.setBadge(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAvailablegiftids(values[i]);
      }
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnchorid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.FansClub.FansClubData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.FansClub.FansClubData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.FansClub.FansClubData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.FansClub.FansClubData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClubname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUserfansclubstatus();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBadge();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.User.FansClub.FansClubData.UserBadge.serializeBinaryToWriter
    );
  }
  f = message.getAvailablegiftidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
  f = message.getAnchorid();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.FansClub.FansClubData.UserBadge.prototype.toObject = function(opt_includeInstance) {
  return proto.User.FansClub.FansClubData.UserBadge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.FansClub.FansClubData.UserBadge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.FansClub.FansClubData.UserBadge.toObject = function(includeInstance, msg) {
  var f, obj = {
    iconsMap: (f = msg.getIconsMap()) ? f.toObject(includeInstance, proto.Image.toObject) : [],
    title: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.FansClub.FansClubData.UserBadge}
 */
proto.User.FansClub.FansClubData.UserBadge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.FansClub.FansClubData.UserBadge;
  return proto.User.FansClub.FansClubData.UserBadge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.FansClub.FansClubData.UserBadge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.FansClub.FansClubData.UserBadge}
 */
proto.User.FansClub.FansClubData.UserBadge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getIconsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.Image.deserializeBinaryFromReader, 0, new proto.Image());
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.FansClub.FansClubData.UserBadge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.FansClub.FansClubData.UserBadge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.FansClub.FansClubData.UserBadge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.FansClub.FansClubData.UserBadge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIconsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.Image.serializeBinaryToWriter);
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * map<int32, Image> icons = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.Image>}
 */
proto.User.FansClub.FansClubData.UserBadge.prototype.getIconsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.Image>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.Image));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.User.FansClub.FansClubData.UserBadge} returns this
 */
proto.User.FansClub.FansClubData.UserBadge.prototype.clearIconsMap = function() {
  this.getIconsMap().clear();
  return this;};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.User.FansClub.FansClubData.UserBadge.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.User.FansClub.FansClubData.UserBadge} returns this
 */
proto.User.FansClub.FansClubData.UserBadge.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clubName = 1;
 * @return {string}
 */
proto.User.FansClub.FansClubData.prototype.getClubname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.User.FansClub.FansClubData} returns this
 */
proto.User.FansClub.FansClubData.prototype.setClubname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.User.FansClub.FansClubData.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.FansClub.FansClubData} returns this
 */
proto.User.FansClub.FansClubData.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 userFansClubStatus = 3;
 * @return {number}
 */
proto.User.FansClub.FansClubData.prototype.getUserfansclubstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.FansClub.FansClubData} returns this
 */
proto.User.FansClub.FansClubData.prototype.setUserfansclubstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional UserBadge badge = 4;
 * @return {?proto.User.FansClub.FansClubData.UserBadge}
 */
proto.User.FansClub.FansClubData.prototype.getBadge = function() {
  return /** @type{?proto.User.FansClub.FansClubData.UserBadge} */ (
    jspb.Message.getWrapperField(this, proto.User.FansClub.FansClubData.UserBadge, 4));
};


/**
 * @param {?proto.User.FansClub.FansClubData.UserBadge|undefined} value
 * @return {!proto.User.FansClub.FansClubData} returns this
*/
proto.User.FansClub.FansClubData.prototype.setBadge = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.FansClub.FansClubData} returns this
 */
proto.User.FansClub.FansClubData.prototype.clearBadge = function() {
  return this.setBadge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.FansClub.FansClubData.prototype.hasBadge = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int64 availableGiftIds = 5;
 * @return {!Array<number>}
 */
proto.User.FansClub.FansClubData.prototype.getAvailablegiftidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.User.FansClub.FansClubData} returns this
 */
proto.User.FansClub.FansClubData.prototype.setAvailablegiftidsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.User.FansClub.FansClubData} returns this
 */
proto.User.FansClub.FansClubData.prototype.addAvailablegiftids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.User.FansClub.FansClubData} returns this
 */
proto.User.FansClub.FansClubData.prototype.clearAvailablegiftidsList = function() {
  return this.setAvailablegiftidsList([]);
};


/**
 * optional int64 anchorId = 6;
 * @return {number}
 */
proto.User.FansClub.FansClubData.prototype.getAnchorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.FansClub.FansClubData} returns this
 */
proto.User.FansClub.FansClubData.prototype.setAnchorid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional FansClubData data = 1;
 * @return {?proto.User.FansClub.FansClubData}
 */
proto.User.FansClub.prototype.getData = function() {
  return /** @type{?proto.User.FansClub.FansClubData} */ (
    jspb.Message.getWrapperField(this, proto.User.FansClub.FansClubData, 1));
};


/**
 * @param {?proto.User.FansClub.FansClubData|undefined} value
 * @return {!proto.User.FansClub} returns this
*/
proto.User.FansClub.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.FansClub} returns this
 */
proto.User.FansClub.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.FansClub.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<int32, FansClubData> preferData = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.User.FansClub.FansClubData>}
 */
proto.User.FansClub.prototype.getPreferdataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.User.FansClub.FansClubData>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.User.FansClub.FansClubData));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.User.FansClub} returns this
 */
proto.User.FansClub.prototype.clearPreferdataMap = function() {
  this.getPreferdataMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.Border.prototype.toObject = function(opt_includeInstance) {
  return proto.User.Border.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.Border} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.Border.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.Border}
 */
proto.User.Border.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.Border;
  return proto.User.Border.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.Border} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.Border}
 */
proto.User.Border.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.Border.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.Border.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.Border} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.Border.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.GradeBuffInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.User.GradeBuffInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.GradeBuffInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.GradeBuffInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    bufflevel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    statsinfoMap: (f = msg.getStatsinfoMap()) ? f.toObject(includeInstance, undefined) : [],
    buffbadge: (f = msg.getBuffbadge()) && proto.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.GradeBuffInfo}
 */
proto.User.GradeBuffInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.GradeBuffInfo;
  return proto.User.GradeBuffInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.GradeBuffInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.GradeBuffInfo}
 */
proto.User.GradeBuffInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBufflevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndtime(value);
      break;
    case 4:
      var value = msg.getStatsinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 5:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBuffbadge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.GradeBuffInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.GradeBuffInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.GradeBuffInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.GradeBuffInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBufflevel();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getStatsinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getBuffbadge();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 buffLevel = 1;
 * @return {number}
 */
proto.User.GradeBuffInfo.prototype.getBufflevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.GradeBuffInfo} returns this
 */
proto.User.GradeBuffInfo.prototype.setBufflevel = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.User.GradeBuffInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.GradeBuffInfo} returns this
 */
proto.User.GradeBuffInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 endTime = 3;
 * @return {number}
 */
proto.User.GradeBuffInfo.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.GradeBuffInfo} returns this
 */
proto.User.GradeBuffInfo.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * map<int64, int64> statsInfo = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.User.GradeBuffInfo.prototype.getStatsinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.User.GradeBuffInfo} returns this
 */
proto.User.GradeBuffInfo.prototype.clearStatsinfoMap = function() {
  this.getStatsinfoMap().clear();
  return this;};


/**
 * optional Image buffBadge = 5;
 * @return {?proto.Image}
 */
proto.User.GradeBuffInfo.prototype.getBuffbadge = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 5));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.GradeBuffInfo} returns this
*/
proto.User.GradeBuffInfo.prototype.setBuffbadge = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.GradeBuffInfo} returns this
 */
proto.User.GradeBuffInfo.prototype.clearBuffbadge = function() {
  return this.setBuffbadge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.GradeBuffInfo.prototype.hasBuffbadge = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.User.PayGrade.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.PayGrade.prototype.toObject = function(opt_includeInstance) {
  return proto.User.PayGrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.PayGrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.PayGrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    totaldiamondcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    diamondicon: (f = msg.getDiamondicon()) && proto.Image.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    icon: (f = msg.getIcon()) && proto.Image.toObject(includeInstance, f),
    nextname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    level: jspb.Message.getFieldWithDefault(msg, 6, 0),
    nexticon: (f = msg.getNexticon()) && proto.Image.toObject(includeInstance, f),
    nextdiamond: jspb.Message.getFieldWithDefault(msg, 8, 0),
    nowdiamond: jspb.Message.getFieldWithDefault(msg, 9, 0),
    thisgrademindiamond: jspb.Message.getFieldWithDefault(msg, 10, 0),
    thisgrademaxdiamond: jspb.Message.getFieldWithDefault(msg, 11, 0),
    paydiamondbak: jspb.Message.getFieldWithDefault(msg, 12, 0),
    gradedescribe: jspb.Message.getFieldWithDefault(msg, 13, ""),
    gradeiconsList: jspb.Message.toObjectList(msg.getGradeiconsList(),
    proto.User.PayGrade.GradeIcon.toObject, includeInstance),
    screenchattype: jspb.Message.getFieldWithDefault(msg, 15, 0),
    imicon: (f = msg.getImicon()) && proto.Image.toObject(includeInstance, f),
    imiconwithlevel: (f = msg.getImiconwithlevel()) && proto.Image.toObject(includeInstance, f),
    liveicon: (f = msg.getLiveicon()) && proto.Image.toObject(includeInstance, f),
    newimiconwithlevel: (f = msg.getNewimiconwithlevel()) && proto.Image.toObject(includeInstance, f),
    newliveicon: (f = msg.getNewliveicon()) && proto.Image.toObject(includeInstance, f),
    upgradeneedconsume: jspb.Message.getFieldWithDefault(msg, 21, 0),
    nextprivileges: jspb.Message.getFieldWithDefault(msg, 22, ""),
    background: (f = msg.getBackground()) && proto.Image.toObject(includeInstance, f),
    backgroundback: (f = msg.getBackgroundback()) && proto.Image.toObject(includeInstance, f),
    score: jspb.Message.getFieldWithDefault(msg, 25, 0),
    buffinfo: (f = msg.getBuffinfo()) && proto.User.GradeBuffInfo.toObject(includeInstance, f),
    gradebanner: jspb.Message.getFieldWithDefault(msg, 1001, ""),
    profiledialogbg: (f = msg.getProfiledialogbg()) && proto.Image.toObject(includeInstance, f),
    profiledialogbgback: (f = msg.getProfiledialogbgback()) && proto.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.PayGrade}
 */
proto.User.PayGrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.PayGrade;
  return proto.User.PayGrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.PayGrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.PayGrade}
 */
proto.User.PayGrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotaldiamondcount(value);
      break;
    case 2:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setDiamondicon(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setIcon(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextname(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLevel(value);
      break;
    case 7:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setNexticon(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextdiamond(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNowdiamond(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThisgrademindiamond(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThisgrademaxdiamond(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaydiamondbak(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setGradedescribe(value);
      break;
    case 14:
      var value = new proto.User.PayGrade.GradeIcon;
      reader.readMessage(value,proto.User.PayGrade.GradeIcon.deserializeBinaryFromReader);
      msg.addGradeicons(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScreenchattype(value);
      break;
    case 16:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setImicon(value);
      break;
    case 17:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setImiconwithlevel(value);
      break;
    case 18:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setLiveicon(value);
      break;
    case 19:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setNewimiconwithlevel(value);
      break;
    case 20:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setNewliveicon(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpgradeneedconsume(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextprivileges(value);
      break;
    case 23:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBackground(value);
      break;
    case 24:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setBackgroundback(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScore(value);
      break;
    case 26:
      var value = new proto.User.GradeBuffInfo;
      reader.readMessage(value,proto.User.GradeBuffInfo.deserializeBinaryFromReader);
      msg.setBuffinfo(value);
      break;
    case 1001:
      var value = /** @type {string} */ (reader.readString());
      msg.setGradebanner(value);
      break;
    case 1002:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setProfiledialogbg(value);
      break;
    case 1003:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setProfiledialogbgback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.PayGrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.PayGrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.PayGrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.PayGrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotaldiamondcount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDiamondicon();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIcon();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getNextname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getNexticon();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getNextdiamond();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getNowdiamond();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getThisgrademindiamond();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getThisgrademaxdiamond();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getPaydiamondbak();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getGradedescribe();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getGradeiconsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.User.PayGrade.GradeIcon.serializeBinaryToWriter
    );
  }
  f = message.getScreenchattype();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getImicon();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getImiconwithlevel();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getLiveicon();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getNewimiconwithlevel();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getNewliveicon();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getUpgradeneedconsume();
  if (f !== 0) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = message.getNextprivileges();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getBackground();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getBackgroundback();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt64(
      25,
      f
    );
  }
  f = message.getBuffinfo();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.User.GradeBuffInfo.serializeBinaryToWriter
    );
  }
  f = message.getGradebanner();
  if (f.length > 0) {
    writer.writeString(
      1001,
      f
    );
  }
  f = message.getProfiledialogbg();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getProfiledialogbgback();
  if (f != null) {
    writer.writeMessage(
      1003,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.PayGrade.GradeIcon.prototype.toObject = function(opt_includeInstance) {
  return proto.User.PayGrade.GradeIcon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User.PayGrade.GradeIcon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.PayGrade.GradeIcon.toObject = function(includeInstance, msg) {
  var f, obj = {
    icon: (f = msg.getIcon()) && proto.Image.toObject(includeInstance, f),
    icondiamond: jspb.Message.getFieldWithDefault(msg, 2, 0),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0),
    levelstr: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User.PayGrade.GradeIcon}
 */
proto.User.PayGrade.GradeIcon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User.PayGrade.GradeIcon;
  return proto.User.PayGrade.GradeIcon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User.PayGrade.GradeIcon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User.PayGrade.GradeIcon}
 */
proto.User.PayGrade.GradeIcon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setIcon(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIcondiamond(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLevelstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.PayGrade.GradeIcon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.PayGrade.GradeIcon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User.PayGrade.GradeIcon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.PayGrade.GradeIcon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIcon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getIcondiamond();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLevelstr();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Image icon = 1;
 * @return {?proto.Image}
 */
proto.User.PayGrade.GradeIcon.prototype.getIcon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 1));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade.GradeIcon} returns this
*/
proto.User.PayGrade.GradeIcon.prototype.setIcon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade.GradeIcon} returns this
 */
proto.User.PayGrade.GradeIcon.prototype.clearIcon = function() {
  return this.setIcon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.GradeIcon.prototype.hasIcon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 iconDiamond = 2;
 * @return {number}
 */
proto.User.PayGrade.GradeIcon.prototype.getIcondiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade.GradeIcon} returns this
 */
proto.User.PayGrade.GradeIcon.prototype.setIcondiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 level = 3;
 * @return {number}
 */
proto.User.PayGrade.GradeIcon.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade.GradeIcon} returns this
 */
proto.User.PayGrade.GradeIcon.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string levelStr = 4;
 * @return {string}
 */
proto.User.PayGrade.GradeIcon.prototype.getLevelstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.User.PayGrade.GradeIcon} returns this
 */
proto.User.PayGrade.GradeIcon.prototype.setLevelstr = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 totalDiamondCount = 1;
 * @return {number}
 */
proto.User.PayGrade.prototype.getTotaldiamondcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setTotaldiamondcount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Image diamondIcon = 2;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getDiamondicon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 2));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setDiamondicon = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearDiamondicon = function() {
  return this.setDiamondicon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasDiamondicon = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.User.PayGrade.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Image icon = 4;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getIcon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 4));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setIcon = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearIcon = function() {
  return this.setIcon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasIcon = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string nextName = 5;
 * @return {string}
 */
proto.User.PayGrade.prototype.getNextname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setNextname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 level = 6;
 * @return {number}
 */
proto.User.PayGrade.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Image nextIcon = 7;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getNexticon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 7));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setNexticon = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearNexticon = function() {
  return this.setNexticon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasNexticon = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 nextDiamond = 8;
 * @return {number}
 */
proto.User.PayGrade.prototype.getNextdiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setNextdiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 nowDiamond = 9;
 * @return {number}
 */
proto.User.PayGrade.prototype.getNowdiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setNowdiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 thisGradeMinDiamond = 10;
 * @return {number}
 */
proto.User.PayGrade.prototype.getThisgrademindiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setThisgrademindiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 thisGradeMaxDiamond = 11;
 * @return {number}
 */
proto.User.PayGrade.prototype.getThisgrademaxdiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setThisgrademaxdiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 payDiamondBak = 12;
 * @return {number}
 */
proto.User.PayGrade.prototype.getPaydiamondbak = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setPaydiamondbak = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string gradeDescribe = 13;
 * @return {string}
 */
proto.User.PayGrade.prototype.getGradedescribe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setGradedescribe = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * repeated GradeIcon gradeIcons = 14;
 * @return {!Array<!proto.User.PayGrade.GradeIcon>}
 */
proto.User.PayGrade.prototype.getGradeiconsList = function() {
  return /** @type{!Array<!proto.User.PayGrade.GradeIcon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.User.PayGrade.GradeIcon, 14));
};


/**
 * @param {!Array<!proto.User.PayGrade.GradeIcon>} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setGradeiconsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.User.PayGrade.GradeIcon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.User.PayGrade.GradeIcon}
 */
proto.User.PayGrade.prototype.addGradeicons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.User.PayGrade.GradeIcon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearGradeiconsList = function() {
  return this.setGradeiconsList([]);
};


/**
 * optional int64 screenChatType = 15;
 * @return {number}
 */
proto.User.PayGrade.prototype.getScreenchattype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setScreenchattype = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional Image imIcon = 16;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getImicon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 16));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setImicon = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearImicon = function() {
  return this.setImicon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasImicon = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Image imIconWithLevel = 17;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getImiconwithlevel = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 17));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setImiconwithlevel = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearImiconwithlevel = function() {
  return this.setImiconwithlevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasImiconwithlevel = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Image liveIcon = 18;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getLiveicon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 18));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setLiveicon = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearLiveicon = function() {
  return this.setLiveicon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasLiveicon = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Image newImIconWithLevel = 19;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getNewimiconwithlevel = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 19));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setNewimiconwithlevel = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearNewimiconwithlevel = function() {
  return this.setNewimiconwithlevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasNewimiconwithlevel = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Image newLiveIcon = 20;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getNewliveicon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 20));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setNewliveicon = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearNewliveicon = function() {
  return this.setNewliveicon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasNewliveicon = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional int64 upgradeNeedConsume = 21;
 * @return {number}
 */
proto.User.PayGrade.prototype.getUpgradeneedconsume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setUpgradeneedconsume = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional string nextPrivileges = 22;
 * @return {string}
 */
proto.User.PayGrade.prototype.getNextprivileges = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setNextprivileges = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional Image background = 23;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getBackground = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 23));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setBackground = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearBackground = function() {
  return this.setBackground(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasBackground = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional Image backgroundBack = 24;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getBackgroundback = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 24));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setBackgroundback = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearBackgroundback = function() {
  return this.setBackgroundback(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasBackgroundback = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional int64 score = 25;
 * @return {number}
 */
proto.User.PayGrade.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional GradeBuffInfo buffInfo = 26;
 * @return {?proto.User.GradeBuffInfo}
 */
proto.User.PayGrade.prototype.getBuffinfo = function() {
  return /** @type{?proto.User.GradeBuffInfo} */ (
    jspb.Message.getWrapperField(this, proto.User.GradeBuffInfo, 26));
};


/**
 * @param {?proto.User.GradeBuffInfo|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setBuffinfo = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearBuffinfo = function() {
  return this.setBuffinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasBuffinfo = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional string gradeBanner = 1001;
 * @return {string}
 */
proto.User.PayGrade.prototype.getGradebanner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1001, ""));
};


/**
 * @param {string} value
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.setGradebanner = function(value) {
  return jspb.Message.setProto3StringField(this, 1001, value);
};


/**
 * optional Image profileDialogBg = 1002;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getProfiledialogbg = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 1002));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setProfiledialogbg = function(value) {
  return jspb.Message.setWrapperField(this, 1002, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearProfiledialogbg = function() {
  return this.setProfiledialogbg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasProfiledialogbg = function() {
  return jspb.Message.getField(this, 1002) != null;
};


/**
 * optional Image profileDialogBgBack = 1003;
 * @return {?proto.Image}
 */
proto.User.PayGrade.prototype.getProfiledialogbgback = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 1003));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User.PayGrade} returns this
*/
proto.User.PayGrade.prototype.setProfiledialogbgback = function(value) {
  return jspb.Message.setWrapperField(this, 1003, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User.PayGrade} returns this
 */
proto.User.PayGrade.prototype.clearProfiledialogbgback = function() {
  return this.setProfiledialogbgback(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.PayGrade.prototype.hasProfiledialogbgback = function() {
  return jspb.Message.getField(this, 1003) != null;
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 shortId = 2;
 * @return {number}
 */
proto.User.prototype.getShortid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setShortid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.User.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 gender = 4;
 * @return {number}
 */
proto.User.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setGender = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string signature = 5;
 * @return {string}
 */
proto.User.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 level = 6;
 * @return {number}
 */
proto.User.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 birthday = 7;
 * @return {number}
 */
proto.User.prototype.getBirthday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setBirthday = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string telephone = 8;
 * @return {string}
 */
proto.User.prototype.getTelephone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setTelephone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional Image avatarThumb = 9;
 * @return {?proto.Image}
 */
proto.User.prototype.getAvatarthumb = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 9));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setAvatarthumb = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearAvatarthumb = function() {
  return this.setAvatarthumb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasAvatarthumb = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Image avatarMedium = 10;
 * @return {?proto.Image}
 */
proto.User.prototype.getAvatarmedium = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 10));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setAvatarmedium = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearAvatarmedium = function() {
  return this.setAvatarmedium(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasAvatarmedium = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Image avatarLarge = 11;
 * @return {?proto.Image}
 */
proto.User.prototype.getAvatarlarge = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 11));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setAvatarlarge = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearAvatarlarge = function() {
  return this.setAvatarlarge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasAvatarlarge = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool verified = 12;
 * @return {boolean}
 */
proto.User.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional int32 experience = 13;
 * @return {number}
 */
proto.User.prototype.getExperience = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setExperience = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string city = 14;
 * @return {string}
 */
proto.User.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 status = 15;
 * @return {number}
 */
proto.User.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int64 createTime = 16;
 * @return {number}
 */
proto.User.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 modifyTime = 17;
 * @return {number}
 */
proto.User.prototype.getModifytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setModifytime = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 secret = 18;
 * @return {number}
 */
proto.User.prototype.getSecret = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setSecret = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional string shareQrcodeUri = 19;
 * @return {string}
 */
proto.User.prototype.getShareqrcodeuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setShareqrcodeuri = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional int32 incomeSharePercent = 20;
 * @return {number}
 */
proto.User.prototype.getIncomesharepercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setIncomesharepercent = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional Image badgeImageList = 21;
 * @return {?proto.Image}
 */
proto.User.prototype.getBadgeimagelist = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 21));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setBadgeimagelist = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearBadgeimagelist = function() {
  return this.setBadgeimagelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasBadgeimagelist = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional FollowInfo followInfo = 22;
 * @return {?proto.User.FollowInfo}
 */
proto.User.prototype.getFollowinfo = function() {
  return /** @type{?proto.User.FollowInfo} */ (
    jspb.Message.getWrapperField(this, proto.User.FollowInfo, 22));
};


/**
 * @param {?proto.User.FollowInfo|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setFollowinfo = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearFollowinfo = function() {
  return this.setFollowinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasFollowinfo = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional PayGrade payGrade = 23;
 * @return {?proto.User.PayGrade}
 */
proto.User.prototype.getPaygrade = function() {
  return /** @type{?proto.User.PayGrade} */ (
    jspb.Message.getWrapperField(this, proto.User.PayGrade, 23));
};


/**
 * @param {?proto.User.PayGrade|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setPaygrade = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearPaygrade = function() {
  return this.setPaygrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasPaygrade = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional FansClub fansClub = 24;
 * @return {?proto.User.FansClub}
 */
proto.User.prototype.getFansclub = function() {
  return /** @type{?proto.User.FansClub} */ (
    jspb.Message.getWrapperField(this, proto.User.FansClub, 24));
};


/**
 * @param {?proto.User.FansClub|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setFansclub = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearFansclub = function() {
  return this.setFansclub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasFansclub = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional Border border = 25;
 * @return {?proto.User.Border}
 */
proto.User.prototype.getBorder = function() {
  return /** @type{?proto.User.Border} */ (
    jspb.Message.getWrapperField(this, proto.User.Border, 25));
};


/**
 * @param {?proto.User.Border|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setBorder = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearBorder = function() {
  return this.setBorder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasBorder = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional string specialId = 26;
 * @return {string}
 */
proto.User.prototype.getSpecialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setSpecialid = function(value) {
  return jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * optional Image avatarBorder = 27;
 * @return {?proto.Image}
 */
proto.User.prototype.getAvatarborder = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 27));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setAvatarborder = function(value) {
  return jspb.Message.setWrapperField(this, 27, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearAvatarborder = function() {
  return this.setAvatarborder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasAvatarborder = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional Image medal = 28;
 * @return {?proto.Image}
 */
proto.User.prototype.getMedal = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 28));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setMedal = function(value) {
  return jspb.Message.setWrapperField(this, 28, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearMedal = function() {
  return this.setMedal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasMedal = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * repeated Image realTimeIcons = 29;
 * @return {!Array<!proto.Image>}
 */
proto.User.prototype.getRealtimeiconsList = function() {
  return /** @type{!Array<!proto.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Image, 29));
};


/**
 * @param {!Array<!proto.Image>} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setRealtimeiconsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 29, value);
};


/**
 * @param {!proto.Image=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Image}
 */
proto.User.prototype.addRealtimeicons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 29, opt_value, proto.Image, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearRealtimeiconsList = function() {
  return this.setRealtimeiconsList([]);
};


/**
 * repeated Image newRealTimeIcons = 30;
 * @return {!Array<!proto.Image>}
 */
proto.User.prototype.getNewrealtimeiconsList = function() {
  return /** @type{!Array<!proto.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Image, 30));
};


/**
 * @param {!Array<!proto.Image>} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setNewrealtimeiconsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.Image=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Image}
 */
proto.User.prototype.addNewrealtimeicons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.Image, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearNewrealtimeiconsList = function() {
  return this.setNewrealtimeiconsList([]);
};


/**
 * optional int64 topVipNo = 31;
 * @return {number}
 */
proto.User.prototype.getTopvipno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setTopvipno = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional UserAttr userAttr = 32;
 * @return {?proto.User.UserAttr}
 */
proto.User.prototype.getUserattr = function() {
  return /** @type{?proto.User.UserAttr} */ (
    jspb.Message.getWrapperField(this, proto.User.UserAttr, 32));
};


/**
 * @param {?proto.User.UserAttr|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setUserattr = function(value) {
  return jspb.Message.setWrapperField(this, 32, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearUserattr = function() {
  return this.setUserattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasUserattr = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional OwnRoom ownRoom = 33;
 * @return {?proto.User.OwnRoom}
 */
proto.User.prototype.getOwnroom = function() {
  return /** @type{?proto.User.OwnRoom} */ (
    jspb.Message.getWrapperField(this, proto.User.OwnRoom, 33));
};


/**
 * @param {?proto.User.OwnRoom|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setOwnroom = function(value) {
  return jspb.Message.setWrapperField(this, 33, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearOwnroom = function() {
  return this.setOwnroom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasOwnroom = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional int64 payScore = 34;
 * @return {number}
 */
proto.User.prototype.getPayscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setPayscore = function(value) {
  return jspb.Message.setProto3IntField(this, 34, value);
};


/**
 * optional int64 ticketCount = 35;
 * @return {number}
 */
proto.User.prototype.getTicketcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setTicketcount = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional AnchorInfo anchorInfo = 36;
 * @return {?proto.User.AnchorInfo}
 */
proto.User.prototype.getAnchorinfo = function() {
  return /** @type{?proto.User.AnchorInfo} */ (
    jspb.Message.getWrapperField(this, proto.User.AnchorInfo, 36));
};


/**
 * @param {?proto.User.AnchorInfo|undefined} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setAnchorinfo = function(value) {
  return jspb.Message.setWrapperField(this, 36, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearAnchorinfo = function() {
  return this.setAnchorinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.User.prototype.hasAnchorinfo = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional int32 linkMicStats = 37;
 * @return {number}
 */
proto.User.prototype.getLinkmicstats = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 37, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setLinkmicstats = function(value) {
  return jspb.Message.setProto3IntField(this, 37, value);
};


/**
 * optional string displayId = 38;
 * @return {string}
 */
proto.User.prototype.getDisplayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setDisplayid = function(value) {
  return jspb.Message.setProto3StringField(this, 38, value);
};


/**
 * optional string secUid = 46;
 * @return {string}
 */
proto.User.prototype.getSecuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 46, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setSecuid = function(value) {
  return jspb.Message.setProto3StringField(this, 46, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TextFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.TextFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TextFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bold: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    italic: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    weight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    italicangle: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fontsize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    userheightlightcolor: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    useremoteclor: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TextFormat}
 */
proto.TextFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TextFormat;
  return proto.TextFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TextFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TextFormat}
 */
proto.TextFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBold(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setItalic(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItalicangle(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFontsize(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserheightlightcolor(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseremoteclor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TextFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TextFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TextFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBold();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getItalic();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getItalicangle();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFontsize();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getUserheightlightcolor();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getUseremoteclor();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string color = 1;
 * @return {string}
 */
proto.TextFormat.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TextFormat} returns this
 */
proto.TextFormat.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool bold = 2;
 * @return {boolean}
 */
proto.TextFormat.prototype.getBold = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TextFormat} returns this
 */
proto.TextFormat.prototype.setBold = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool italic = 3;
 * @return {boolean}
 */
proto.TextFormat.prototype.getItalic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TextFormat} returns this
 */
proto.TextFormat.prototype.setItalic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 weight = 4;
 * @return {number}
 */
proto.TextFormat.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TextFormat} returns this
 */
proto.TextFormat.prototype.setWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 italicAngle = 5;
 * @return {number}
 */
proto.TextFormat.prototype.getItalicangle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.TextFormat} returns this
 */
proto.TextFormat.prototype.setItalicangle = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 fontSize = 6;
 * @return {number}
 */
proto.TextFormat.prototype.getFontsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.TextFormat} returns this
 */
proto.TextFormat.prototype.setFontsize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool userHeightLightColor = 7;
 * @return {boolean}
 */
proto.TextFormat.prototype.getUserheightlightcolor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TextFormat} returns this
 */
proto.TextFormat.prototype.setUserheightlightcolor = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool useRemoteClor = 8;
 * @return {boolean}
 */
proto.TextFormat.prototype.getUseremoteclor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TextFormat} returns this
 */
proto.TextFormat.prototype.setUseremoteclor = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TextPiece.prototype.toObject = function(opt_includeInstance) {
  return proto.TextPiece.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TextPiece} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextPiece.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    format: (f = msg.getFormat()) && proto.TextFormat.toObject(includeInstance, f),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 11, ""),
    uservalue: (f = msg.getUservalue()) && proto.TextPieceUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TextPiece}
 */
proto.TextPiece.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TextPiece;
  return proto.TextPiece.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TextPiece} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TextPiece}
 */
proto.TextPiece.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.TextFormat;
      reader.readMessage(value,proto.TextFormat.deserializeBinaryFromReader);
      msg.setFormat(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 21:
      var value = new proto.TextPieceUser;
      reader.readMessage(value,proto.TextPieceUser.deserializeBinaryFromReader);
      msg.setUservalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TextPiece.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TextPiece.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TextPiece} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextPiece.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TextFormat.serializeBinaryToWriter
    );
  }
  f = message.getStringvalue();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUservalue();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.TextPieceUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.TextPiece.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TextPiece} returns this
 */
proto.TextPiece.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TextFormat format = 2;
 * @return {?proto.TextFormat}
 */
proto.TextPiece.prototype.getFormat = function() {
  return /** @type{?proto.TextFormat} */ (
    jspb.Message.getWrapperField(this, proto.TextFormat, 2));
};


/**
 * @param {?proto.TextFormat|undefined} value
 * @return {!proto.TextPiece} returns this
*/
proto.TextPiece.prototype.setFormat = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TextPiece} returns this
 */
proto.TextPiece.prototype.clearFormat = function() {
  return this.setFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TextPiece.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string stringValue = 11;
 * @return {string}
 */
proto.TextPiece.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.TextPiece} returns this
 */
proto.TextPiece.prototype.setStringvalue = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional TextPieceUser userValue = 21;
 * @return {?proto.TextPieceUser}
 */
proto.TextPiece.prototype.getUservalue = function() {
  return /** @type{?proto.TextPieceUser} */ (
    jspb.Message.getWrapperField(this, proto.TextPieceUser, 21));
};


/**
 * @param {?proto.TextPieceUser|undefined} value
 * @return {!proto.TextPiece} returns this
*/
proto.TextPiece.prototype.setUservalue = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TextPiece} returns this
 */
proto.TextPiece.prototype.clearUservalue = function() {
  return this.setUservalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TextPiece.prototype.hasUservalue = function() {
  return jspb.Message.getField(this, 21) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Image.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    urlsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    uri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0),
    avgcolor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    imagetype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    openweburl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    content: (f = msg.getContent()) && proto.Image.Content.toObject(includeInstance, f),
    isanimated: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image;
  return proto.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvgcolor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImagetype(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenweburl(value);
      break;
    case 8:
      var value = new proto.Image.Content;
      reader.readMessage(value,proto.Image.Content.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsanimated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAvgcolor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getImagetype();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOpenweburl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Image.Content.serializeBinaryToWriter
    );
  }
  f = message.getIsanimated();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.Content.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.Content.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.Content} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.Content.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fontcolor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0),
    alternativetext: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.Content}
 */
proto.Image.Content.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.Content;
  return proto.Image.Content.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.Content} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.Content}
 */
proto.Image.Content.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFontcolor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlternativetext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.Content.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.Content.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.Content} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.Content.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFontcolor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAlternativetext();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Image.Content.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Image.Content} returns this
 */
proto.Image.Content.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fontColor = 2;
 * @return {string}
 */
proto.Image.Content.prototype.getFontcolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Image.Content} returns this
 */
proto.Image.Content.prototype.setFontcolor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 level = 3;
 * @return {number}
 */
proto.Image.Content.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Image.Content} returns this
 */
proto.Image.Content.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string alternativeText = 4;
 * @return {string}
 */
proto.Image.Content.prototype.getAlternativetext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Image.Content} returns this
 */
proto.Image.Content.prototype.setAlternativetext = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string urls = 1;
 * @return {!Array<string>}
 */
proto.Image.prototype.getUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setUrlsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.addUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.clearUrlsList = function() {
  return this.setUrlsList([]);
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.Image.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.Image.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 width = 4;
 * @return {number}
 */
proto.Image.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string avgColor = 5;
 * @return {string}
 */
proto.Image.prototype.getAvgcolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setAvgcolor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 imageType = 6;
 * @return {number}
 */
proto.Image.prototype.getImagetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setImagetype = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string openWebUrl = 7;
 * @return {string}
 */
proto.Image.prototype.getOpenweburl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setOpenweburl = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Content content = 8;
 * @return {?proto.Image.Content}
 */
proto.Image.prototype.getContent = function() {
  return /** @type{?proto.Image.Content} */ (
    jspb.Message.getWrapperField(this, proto.Image.Content, 8));
};


/**
 * @param {?proto.Image.Content|undefined} value
 * @return {!proto.Image} returns this
*/
proto.Image.prototype.setContent = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.prototype.hasContent = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool isAnimated = 9;
 * @return {boolean}
 */
proto.Image.prototype.getIsanimated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setIsanimated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TextPieceUser.prototype.toObject = function(opt_includeInstance) {
  return proto.TextPieceUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TextPieceUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextPieceUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.User.toObject(includeInstance, f),
    withcolon: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TextPieceUser}
 */
proto.TextPieceUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TextPieceUser;
  return proto.TextPieceUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TextPieceUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TextPieceUser}
 */
proto.TextPieceUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithcolon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TextPieceUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TextPieceUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TextPieceUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextPieceUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getWithcolon();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.User}
 */
proto.TextPieceUser.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 1));
};


/**
 * @param {?proto.User|undefined} value
 * @return {!proto.TextPieceUser} returns this
*/
proto.TextPieceUser.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TextPieceUser} returns this
 */
proto.TextPieceUser.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TextPieceUser.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool withColon = 2;
 * @return {boolean}
 */
proto.TextPieceUser.prototype.getWithcolon = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TextPieceUser} returns this
 */
proto.TextPieceUser.prototype.setWithcolon = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PublicAreaCommon.prototype.toObject = function(opt_includeInstance) {
  return proto.PublicAreaCommon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PublicAreaCommon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PublicAreaCommon.toObject = function(includeInstance, msg) {
  var f, obj = {
    userlabel: (f = msg.getUserlabel()) && proto.Image.toObject(includeInstance, f),
    userconsumeinroom: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usersendgiftcntinroom: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PublicAreaCommon}
 */
proto.PublicAreaCommon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PublicAreaCommon;
  return proto.PublicAreaCommon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PublicAreaCommon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PublicAreaCommon}
 */
proto.PublicAreaCommon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setUserlabel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserconsumeinroom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUsersendgiftcntinroom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PublicAreaCommon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PublicAreaCommon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PublicAreaCommon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PublicAreaCommon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserlabel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getUserconsumeinroom();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUsersendgiftcntinroom();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional Image userLabel = 1;
 * @return {?proto.Image}
 */
proto.PublicAreaCommon.prototype.getUserlabel = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 1));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.PublicAreaCommon} returns this
*/
proto.PublicAreaCommon.prototype.setUserlabel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PublicAreaCommon} returns this
 */
proto.PublicAreaCommon.prototype.clearUserlabel = function() {
  return this.setUserlabel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PublicAreaCommon.prototype.hasUserlabel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 userConsumeInRoom = 2;
 * @return {number}
 */
proto.PublicAreaCommon.prototype.getUserconsumeinroom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PublicAreaCommon} returns this
 */
proto.PublicAreaCommon.prototype.setUserconsumeinroom = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 userSendGiftCntInRoom = 3;
 * @return {number}
 */
proto.PublicAreaCommon.prototype.getUsersendgiftcntinroom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PublicAreaCommon} returns this
 */
proto.PublicAreaCommon.prototype.setUsersendgiftcntinroom = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GiftIMPriority.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftIMPriority.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftIMPriority.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftIMPriority} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftIMPriority.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuesizesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    selfqueuepriority: jspb.Message.getFieldWithDefault(msg, 2, 0),
    priority: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftIMPriority}
 */
proto.GiftIMPriority.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftIMPriority;
  return proto.GiftIMPriority.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftIMPriority} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftIMPriority}
 */
proto.GiftIMPriority.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addQueuesizes(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSelfqueuepriority(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftIMPriority.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftIMPriority.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftIMPriority} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftIMPriority.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuesizesList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getSelfqueuepriority();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated int64 queueSizes = 1;
 * @return {!Array<number>}
 */
proto.GiftIMPriority.prototype.getQueuesizesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.GiftIMPriority} returns this
 */
proto.GiftIMPriority.prototype.setQueuesizesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.GiftIMPriority} returns this
 */
proto.GiftIMPriority.prototype.addQueuesizes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GiftIMPriority} returns this
 */
proto.GiftIMPriority.prototype.clearQueuesizesList = function() {
  return this.setQueuesizesList([]);
};


/**
 * optional int64 selfQueuePriority = 2;
 * @return {number}
 */
proto.GiftIMPriority.prototype.getSelfqueuepriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftIMPriority} returns this
 */
proto.GiftIMPriority.prototype.setSelfqueuepriority = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 priority = 3;
 * @return {number}
 */
proto.GiftIMPriority.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftIMPriority} returns this
 */
proto.GiftIMPriority.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftTrayInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftTrayInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftTrayInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftTrayInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    traydisplaytext: (f = msg.getTraydisplaytext()) && proto.Text.toObject(includeInstance, f),
    traybaseimg: (f = msg.getTraybaseimg()) && proto.Image.toObject(includeInstance, f),
    trayheadimg: (f = msg.getTrayheadimg()) && proto.Image.toObject(includeInstance, f),
    trayrightimg: (f = msg.getTrayrightimg()) && proto.Image.toObject(includeInstance, f),
    traylevel: jspb.Message.getFieldWithDefault(msg, 5, 0),
    traydynamicimg: (f = msg.getTraydynamicimg()) && proto.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftTrayInfo}
 */
proto.GiftTrayInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftTrayInfo;
  return proto.GiftTrayInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftTrayInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftTrayInfo}
 */
proto.GiftTrayInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Text;
      reader.readMessage(value,proto.Text.deserializeBinaryFromReader);
      msg.setTraydisplaytext(value);
      break;
    case 2:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setTraybaseimg(value);
      break;
    case 3:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setTrayheadimg(value);
      break;
    case 4:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setTrayrightimg(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTraylevel(value);
      break;
    case 6:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setTraydynamicimg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftTrayInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftTrayInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftTrayInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftTrayInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraydisplaytext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Text.serializeBinaryToWriter
    );
  }
  f = message.getTraybaseimg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getTrayheadimg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getTrayrightimg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getTraylevel();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTraydynamicimg();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional Text trayDisplayText = 1;
 * @return {?proto.Text}
 */
proto.GiftTrayInfo.prototype.getTraydisplaytext = function() {
  return /** @type{?proto.Text} */ (
    jspb.Message.getWrapperField(this, proto.Text, 1));
};


/**
 * @param {?proto.Text|undefined} value
 * @return {!proto.GiftTrayInfo} returns this
*/
proto.GiftTrayInfo.prototype.setTraydisplaytext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftTrayInfo} returns this
 */
proto.GiftTrayInfo.prototype.clearTraydisplaytext = function() {
  return this.setTraydisplaytext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftTrayInfo.prototype.hasTraydisplaytext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Image trayBaseImg = 2;
 * @return {?proto.Image}
 */
proto.GiftTrayInfo.prototype.getTraybaseimg = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 2));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftTrayInfo} returns this
*/
proto.GiftTrayInfo.prototype.setTraybaseimg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftTrayInfo} returns this
 */
proto.GiftTrayInfo.prototype.clearTraybaseimg = function() {
  return this.setTraybaseimg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftTrayInfo.prototype.hasTraybaseimg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Image trayHeadImg = 3;
 * @return {?proto.Image}
 */
proto.GiftTrayInfo.prototype.getTrayheadimg = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 3));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftTrayInfo} returns this
*/
proto.GiftTrayInfo.prototype.setTrayheadimg = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftTrayInfo} returns this
 */
proto.GiftTrayInfo.prototype.clearTrayheadimg = function() {
  return this.setTrayheadimg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftTrayInfo.prototype.hasTrayheadimg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Image trayRightImg = 4;
 * @return {?proto.Image}
 */
proto.GiftTrayInfo.prototype.getTrayrightimg = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 4));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftTrayInfo} returns this
*/
proto.GiftTrayInfo.prototype.setTrayrightimg = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftTrayInfo} returns this
 */
proto.GiftTrayInfo.prototype.clearTrayrightimg = function() {
  return this.setTrayrightimg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftTrayInfo.prototype.hasTrayrightimg = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 trayLevel = 5;
 * @return {number}
 */
proto.GiftTrayInfo.prototype.getTraylevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftTrayInfo} returns this
 */
proto.GiftTrayInfo.prototype.setTraylevel = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Image trayDynamicImg = 6;
 * @return {?proto.Image}
 */
proto.GiftTrayInfo.prototype.getTraydynamicimg = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 6));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftTrayInfo} returns this
*/
proto.GiftTrayInfo.prototype.setTraydynamicimg = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftTrayInfo} returns this
 */
proto.GiftTrayInfo.prototype.clearTraydynamicimg = function() {
  return this.setTraydynamicimg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftTrayInfo.prototype.hasTraydynamicimg = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GiftStruct.repeatedFields_ = [25,44,45,55,59];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftStruct.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftStruct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftStruct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftStruct.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: (f = msg.getImage()) && proto.Image.toObject(includeInstance, f),
    describe: jspb.Message.getFieldWithDefault(msg, 2, ""),
    notify: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    id: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fansclubinfo: (f = msg.getFansclubinfo()) && proto.GiftStruct.GiftStructFansClubInfo.toObject(includeInstance, f),
    forlinkmic: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    doodle: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    forfansclub: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    combo: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    type: jspb.Message.getFieldWithDefault(msg, 11, 0),
    diamondcount: jspb.Message.getFieldWithDefault(msg, 12, 0),
    isdisplayedonpanel: jspb.Message.getFieldWithDefault(msg, 13, 0),
    primaryeffectid: jspb.Message.getFieldWithDefault(msg, 14, 0),
    giftlabelicon: (f = msg.getGiftlabelicon()) && proto.Image.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 16, ""),
    region: jspb.Message.getFieldWithDefault(msg, 17, ""),
    manual: jspb.Message.getFieldWithDefault(msg, 18, ""),
    forcustom: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    specialeffectsMap: (f = msg.getSpecialeffectsMap()) ? f.toObject(includeInstance, undefined) : [],
    icon: (f = msg.getIcon()) && proto.Image.toObject(includeInstance, f),
    actiontype: jspb.Message.getFieldWithDefault(msg, 22, 0),
    watermelonseeds: jspb.Message.getFieldWithDefault(msg, 23, 0),
    goldeffect: jspb.Message.getFieldWithDefault(msg, 24, ""),
    subsList: jspb.Message.toObjectList(msg.getSubsList(),
    proto.LuckyMoneyGiftMeta.toObject, includeInstance),
    goldenbeans: jspb.Message.getFieldWithDefault(msg, 26, 0),
    honorlevel: jspb.Message.getFieldWithDefault(msg, 27, 0),
    itemtype: jspb.Message.getFieldWithDefault(msg, 28, 0),
    schemeurl: jspb.Message.getFieldWithDefault(msg, 29, ""),
    giftoperation: (f = msg.getGiftoperation()) && proto.GiftPanelOperation.toObject(includeInstance, f),
    eventname: jspb.Message.getFieldWithDefault(msg, 31, ""),
    noblelevel: jspb.Message.getFieldWithDefault(msg, 32, 0),
    guideurl: jspb.Message.getFieldWithDefault(msg, 33, ""),
    punishmedicine: jspb.Message.getBooleanFieldWithDefault(msg, 34, false),
    forportal: jspb.Message.getBooleanFieldWithDefault(msg, 35, false),
    businesstext: jspb.Message.getFieldWithDefault(msg, 36, ""),
    cnygift: jspb.Message.getBooleanFieldWithDefault(msg, 37, false),
    appid: jspb.Message.getFieldWithDefault(msg, 38, 0),
    viplevel: jspb.Message.getFieldWithDefault(msg, 39, 0),
    isgray: jspb.Message.getBooleanFieldWithDefault(msg, 40, false),
    grayschemeurl: jspb.Message.getFieldWithDefault(msg, 41, ""),
    giftscene: jspb.Message.getFieldWithDefault(msg, 42, 0),
    giftbanner: (f = msg.getGiftbanner()) && proto.GiftBanner.toObject(includeInstance, f),
    triggerwordsList: (f = jspb.Message.getRepeatedField(msg, 44)) == null ? undefined : f,
    giftbuffinfosList: jspb.Message.toObjectList(msg.getGiftbuffinfosList(),
    proto.GiftBuffInfo.toObject, includeInstance),
    forfirstrecharge: jspb.Message.getBooleanFieldWithDefault(msg, 46, false),
    dynamicimgforselected: (f = msg.getDynamicimgforselected()) && proto.Image.toObject(includeInstance, f),
    aftersendaction: jspb.Message.getFieldWithDefault(msg, 48, 0),
    giftofflinetime: jspb.Message.getFieldWithDefault(msg, 49, 0),
    topbartext: jspb.Message.getFieldWithDefault(msg, 50, ""),
    toprightavatar: (f = msg.getToprightavatar()) && proto.Image.toObject(includeInstance, f),
    bannerschemeurl: jspb.Message.getFieldWithDefault(msg, 52, ""),
    islocked: jspb.Message.getBooleanFieldWithDefault(msg, 53, false),
    reqextratype: jspb.Message.getFieldWithDefault(msg, 54, 0),
    assetidsList: (f = jspb.Message.getRepeatedField(msg, 55)) == null ? undefined : f,
    giftpreviewinfo: (f = msg.getGiftpreviewinfo()) && proto.GiftPreviewInfo.toObject(includeInstance, f),
    gifttip: (f = msg.getGifttip()) && proto.GiftTip.toObject(includeInstance, f),
    needsweeplightcount: jspb.Message.getFieldWithDefault(msg, 58, 0),
    groupinfoList: jspb.Message.toObjectList(msg.getGroupinfoList(),
    proto.GiftGroupInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftStruct}
 */
proto.GiftStruct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftStruct;
  return proto.GiftStruct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftStruct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftStruct}
 */
proto.GiftStruct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescribe(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotify(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 6:
      var value = new proto.GiftStruct.GiftStructFansClubInfo;
      reader.readMessage(value,proto.GiftStruct.GiftStructFansClubInfo.deserializeBinaryFromReader);
      msg.setFansclubinfo(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForlinkmic(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoodle(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForfansclub(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCombo(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiamondcount(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsdisplayedonpanel(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrimaryeffectid(value);
      break;
    case 15:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setGiftlabelicon(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setManual(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForcustom(value);
      break;
    case 20:
      var value = msg.getSpecialeffectsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
         });
      break;
    case 21:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setIcon(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiontype(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWatermelonseeds(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoldeffect(value);
      break;
    case 25:
      var value = new proto.LuckyMoneyGiftMeta;
      reader.readMessage(value,proto.LuckyMoneyGiftMeta.deserializeBinaryFromReader);
      msg.addSubs(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGoldenbeans(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHonorlevel(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemtype(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemeurl(value);
      break;
    case 30:
      var value = new proto.GiftPanelOperation;
      reader.readMessage(value,proto.GiftPanelOperation.deserializeBinaryFromReader);
      msg.setGiftoperation(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventname(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNoblelevel(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuideurl(value);
      break;
    case 34:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPunishmedicine(value);
      break;
    case 35:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForportal(value);
      break;
    case 36:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinesstext(value);
      break;
    case 37:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCnygift(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAppid(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setViplevel(value);
      break;
    case 40:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgray(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrayschemeurl(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGiftscene(value);
      break;
    case 43:
      var value = new proto.GiftBanner;
      reader.readMessage(value,proto.GiftBanner.deserializeBinaryFromReader);
      msg.setGiftbanner(value);
      break;
    case 44:
      var value = /** @type {string} */ (reader.readString());
      msg.addTriggerwords(value);
      break;
    case 45:
      var value = new proto.GiftBuffInfo;
      reader.readMessage(value,proto.GiftBuffInfo.deserializeBinaryFromReader);
      msg.addGiftbuffinfos(value);
      break;
    case 46:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForfirstrecharge(value);
      break;
    case 47:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setDynamicimgforselected(value);
      break;
    case 48:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAftersendaction(value);
      break;
    case 49:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGiftofflinetime(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopbartext(value);
      break;
    case 51:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setToprightavatar(value);
      break;
    case 52:
      var value = /** @type {string} */ (reader.readString());
      msg.setBannerschemeurl(value);
      break;
    case 53:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslocked(value);
      break;
    case 54:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReqextratype(value);
      break;
    case 55:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAssetids(values[i]);
      }
      break;
    case 56:
      var value = new proto.GiftPreviewInfo;
      reader.readMessage(value,proto.GiftPreviewInfo.deserializeBinaryFromReader);
      msg.setGiftpreviewinfo(value);
      break;
    case 57:
      var value = new proto.GiftTip;
      reader.readMessage(value,proto.GiftTip.deserializeBinaryFromReader);
      msg.setGifttip(value);
      break;
    case 58:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNeedsweeplightcount(value);
      break;
    case 59:
      var value = new proto.GiftGroupInfo;
      reader.readMessage(value,proto.GiftGroupInfo.deserializeBinaryFromReader);
      msg.addGroupinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftStruct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftStruct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftStruct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftStruct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getDescribe();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNotify();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getFansclubinfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.GiftStruct.GiftStructFansClubInfo.serializeBinaryToWriter
    );
  }
  f = message.getForlinkmic();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getDoodle();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getForfansclub();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getCombo();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getDiamondcount();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getIsdisplayedonpanel();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getPrimaryeffectid();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getGiftlabelicon();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getManual();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getForcustom();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getSpecialeffectsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(20, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getIcon();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getActiontype();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getWatermelonseeds();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getGoldeffect();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getSubsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      25,
      f,
      proto.LuckyMoneyGiftMeta.serializeBinaryToWriter
    );
  }
  f = message.getGoldenbeans();
  if (f !== 0) {
    writer.writeInt64(
      26,
      f
    );
  }
  f = message.getHonorlevel();
  if (f !== 0) {
    writer.writeInt64(
      27,
      f
    );
  }
  f = message.getItemtype();
  if (f !== 0) {
    writer.writeInt32(
      28,
      f
    );
  }
  f = message.getSchemeurl();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getGiftoperation();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.GiftPanelOperation.serializeBinaryToWriter
    );
  }
  f = message.getEventname();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getNoblelevel();
  if (f !== 0) {
    writer.writeInt64(
      32,
      f
    );
  }
  f = message.getGuideurl();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = message.getPunishmedicine();
  if (f) {
    writer.writeBool(
      34,
      f
    );
  }
  f = message.getForportal();
  if (f) {
    writer.writeBool(
      35,
      f
    );
  }
  f = message.getBusinesstext();
  if (f.length > 0) {
    writer.writeString(
      36,
      f
    );
  }
  f = message.getCnygift();
  if (f) {
    writer.writeBool(
      37,
      f
    );
  }
  f = message.getAppid();
  if (f !== 0) {
    writer.writeInt64(
      38,
      f
    );
  }
  f = message.getViplevel();
  if (f !== 0) {
    writer.writeInt64(
      39,
      f
    );
  }
  f = message.getIsgray();
  if (f) {
    writer.writeBool(
      40,
      f
    );
  }
  f = message.getGrayschemeurl();
  if (f.length > 0) {
    writer.writeString(
      41,
      f
    );
  }
  f = message.getGiftscene();
  if (f !== 0) {
    writer.writeInt64(
      42,
      f
    );
  }
  f = message.getGiftbanner();
  if (f != null) {
    writer.writeMessage(
      43,
      f,
      proto.GiftBanner.serializeBinaryToWriter
    );
  }
  f = message.getTriggerwordsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      44,
      f
    );
  }
  f = message.getGiftbuffinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      45,
      f,
      proto.GiftBuffInfo.serializeBinaryToWriter
    );
  }
  f = message.getForfirstrecharge();
  if (f) {
    writer.writeBool(
      46,
      f
    );
  }
  f = message.getDynamicimgforselected();
  if (f != null) {
    writer.writeMessage(
      47,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getAftersendaction();
  if (f !== 0) {
    writer.writeInt32(
      48,
      f
    );
  }
  f = message.getGiftofflinetime();
  if (f !== 0) {
    writer.writeInt64(
      49,
      f
    );
  }
  f = message.getTopbartext();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
  f = message.getToprightavatar();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getBannerschemeurl();
  if (f.length > 0) {
    writer.writeString(
      52,
      f
    );
  }
  f = message.getIslocked();
  if (f) {
    writer.writeBool(
      53,
      f
    );
  }
  f = message.getReqextratype();
  if (f !== 0) {
    writer.writeInt64(
      54,
      f
    );
  }
  f = message.getAssetidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      55,
      f
    );
  }
  f = message.getGiftpreviewinfo();
  if (f != null) {
    writer.writeMessage(
      56,
      f,
      proto.GiftPreviewInfo.serializeBinaryToWriter
    );
  }
  f = message.getGifttip();
  if (f != null) {
    writer.writeMessage(
      57,
      f,
      proto.GiftTip.serializeBinaryToWriter
    );
  }
  f = message.getNeedsweeplightcount();
  if (f !== 0) {
    writer.writeInt32(
      58,
      f
    );
  }
  f = message.getGroupinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      59,
      f,
      proto.GiftGroupInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftStruct.GiftStructFansClubInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftStruct.GiftStructFansClubInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftStruct.GiftStructFansClubInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftStruct.GiftStructFansClubInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    minlevel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    insertpos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftStruct.GiftStructFansClubInfo}
 */
proto.GiftStruct.GiftStructFansClubInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftStruct.GiftStructFansClubInfo;
  return proto.GiftStruct.GiftStructFansClubInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftStruct.GiftStructFansClubInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftStruct.GiftStructFansClubInfo}
 */
proto.GiftStruct.GiftStructFansClubInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinlevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInsertpos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftStruct.GiftStructFansClubInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftStruct.GiftStructFansClubInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftStruct.GiftStructFansClubInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftStruct.GiftStructFansClubInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinlevel();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInsertpos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 minLevel = 1;
 * @return {number}
 */
proto.GiftStruct.GiftStructFansClubInfo.prototype.getMinlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct.GiftStructFansClubInfo} returns this
 */
proto.GiftStruct.GiftStructFansClubInfo.prototype.setMinlevel = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 insertPos = 2;
 * @return {number}
 */
proto.GiftStruct.GiftStructFansClubInfo.prototype.getInsertpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct.GiftStructFansClubInfo} returns this
 */
proto.GiftStruct.GiftStructFansClubInfo.prototype.setInsertpos = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Image image = 1;
 * @return {?proto.Image}
 */
proto.GiftStruct.prototype.getImage = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 1));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string describe = 2;
 * @return {string}
 */
proto.GiftStruct.prototype.getDescribe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setDescribe = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool notify = 3;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getNotify = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setNotify = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 duration = 4;
 * @return {number}
 */
proto.GiftStruct.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 id = 5;
 * @return {number}
 */
proto.GiftStruct.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional GiftStructFansClubInfo fansclubInfo = 6;
 * @return {?proto.GiftStruct.GiftStructFansClubInfo}
 */
proto.GiftStruct.prototype.getFansclubinfo = function() {
  return /** @type{?proto.GiftStruct.GiftStructFansClubInfo} */ (
    jspb.Message.getWrapperField(this, proto.GiftStruct.GiftStructFansClubInfo, 6));
};


/**
 * @param {?proto.GiftStruct.GiftStructFansClubInfo|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setFansclubinfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearFansclubinfo = function() {
  return this.setFansclubinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasFansclubinfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool forLinkmic = 7;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getForlinkmic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setForlinkmic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool doodle = 8;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getDoodle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setDoodle = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool forFansclub = 9;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getForfansclub = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setForfansclub = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool combo = 10;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getCombo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setCombo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional int32 type = 11;
 * @return {number}
 */
proto.GiftStruct.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 diamondCount = 12;
 * @return {number}
 */
proto.GiftStruct.prototype.getDiamondcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setDiamondcount = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 isDisplayedOnPanel = 13;
 * @return {number}
 */
proto.GiftStruct.prototype.getIsdisplayedonpanel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setIsdisplayedonpanel = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 primaryEffectId = 14;
 * @return {number}
 */
proto.GiftStruct.prototype.getPrimaryeffectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setPrimaryeffectid = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional Image giftLabelIcon = 15;
 * @return {?proto.Image}
 */
proto.GiftStruct.prototype.getGiftlabelicon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 15));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setGiftlabelicon = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearGiftlabelicon = function() {
  return this.setGiftlabelicon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasGiftlabelicon = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string name = 16;
 * @return {string}
 */
proto.GiftStruct.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string region = 17;
 * @return {string}
 */
proto.GiftStruct.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string manual = 18;
 * @return {string}
 */
proto.GiftStruct.prototype.getManual = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setManual = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional bool forCustom = 19;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getForcustom = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setForcustom = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * map<string, int64> specialEffects = 20;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.GiftStruct.prototype.getSpecialeffectsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 20, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearSpecialeffectsMap = function() {
  this.getSpecialeffectsMap().clear();
  return this;};


/**
 * optional Image icon = 21;
 * @return {?proto.Image}
 */
proto.GiftStruct.prototype.getIcon = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 21));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setIcon = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearIcon = function() {
  return this.setIcon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasIcon = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int32 actionType = 22;
 * @return {number}
 */
proto.GiftStruct.prototype.getActiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setActiontype = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 watermelonSeeds = 23;
 * @return {number}
 */
proto.GiftStruct.prototype.getWatermelonseeds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setWatermelonseeds = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional string goldEffect = 24;
 * @return {string}
 */
proto.GiftStruct.prototype.getGoldeffect = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setGoldeffect = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * repeated LuckyMoneyGiftMeta subs = 25;
 * @return {!Array<!proto.LuckyMoneyGiftMeta>}
 */
proto.GiftStruct.prototype.getSubsList = function() {
  return /** @type{!Array<!proto.LuckyMoneyGiftMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LuckyMoneyGiftMeta, 25));
};


/**
 * @param {!Array<!proto.LuckyMoneyGiftMeta>} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setSubsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 25, value);
};


/**
 * @param {!proto.LuckyMoneyGiftMeta=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LuckyMoneyGiftMeta}
 */
proto.GiftStruct.prototype.addSubs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 25, opt_value, proto.LuckyMoneyGiftMeta, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearSubsList = function() {
  return this.setSubsList([]);
};


/**
 * optional int64 goldenBeans = 26;
 * @return {number}
 */
proto.GiftStruct.prototype.getGoldenbeans = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setGoldenbeans = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional int64 honorLevel = 27;
 * @return {number}
 */
proto.GiftStruct.prototype.getHonorlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setHonorlevel = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional int32 itemType = 28;
 * @return {number}
 */
proto.GiftStruct.prototype.getItemtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setItemtype = function(value) {
  return jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * optional string schemeUrl = 29;
 * @return {string}
 */
proto.GiftStruct.prototype.getSchemeurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setSchemeurl = function(value) {
  return jspb.Message.setProto3StringField(this, 29, value);
};


/**
 * optional GiftPanelOperation giftOperation = 30;
 * @return {?proto.GiftPanelOperation}
 */
proto.GiftStruct.prototype.getGiftoperation = function() {
  return /** @type{?proto.GiftPanelOperation} */ (
    jspb.Message.getWrapperField(this, proto.GiftPanelOperation, 30));
};


/**
 * @param {?proto.GiftPanelOperation|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setGiftoperation = function(value) {
  return jspb.Message.setWrapperField(this, 30, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearGiftoperation = function() {
  return this.setGiftoperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasGiftoperation = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional string eventName = 31;
 * @return {string}
 */
proto.GiftStruct.prototype.getEventname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setEventname = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional int64 nobleLevel = 32;
 * @return {number}
 */
proto.GiftStruct.prototype.getNoblelevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setNoblelevel = function(value) {
  return jspb.Message.setProto3IntField(this, 32, value);
};


/**
 * optional string guideUrl = 33;
 * @return {string}
 */
proto.GiftStruct.prototype.getGuideurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setGuideurl = function(value) {
  return jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * optional bool punishMedicine = 34;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getPunishmedicine = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 34, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setPunishmedicine = function(value) {
  return jspb.Message.setProto3BooleanField(this, 34, value);
};


/**
 * optional bool forPortal = 35;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getForportal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 35, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setForportal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 35, value);
};


/**
 * optional string businessText = 36;
 * @return {string}
 */
proto.GiftStruct.prototype.getBusinesstext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 36, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setBusinesstext = function(value) {
  return jspb.Message.setProto3StringField(this, 36, value);
};


/**
 * optional bool cnyGift = 37;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getCnygift = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 37, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setCnygift = function(value) {
  return jspb.Message.setProto3BooleanField(this, 37, value);
};


/**
 * optional int64 appId = 38;
 * @return {number}
 */
proto.GiftStruct.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setAppid = function(value) {
  return jspb.Message.setProto3IntField(this, 38, value);
};


/**
 * optional int64 vipLevel = 39;
 * @return {number}
 */
proto.GiftStruct.prototype.getViplevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 39, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setViplevel = function(value) {
  return jspb.Message.setProto3IntField(this, 39, value);
};


/**
 * optional bool isGray = 40;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getIsgray = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 40, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setIsgray = function(value) {
  return jspb.Message.setProto3BooleanField(this, 40, value);
};


/**
 * optional string graySchemeUrl = 41;
 * @return {string}
 */
proto.GiftStruct.prototype.getGrayschemeurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setGrayschemeurl = function(value) {
  return jspb.Message.setProto3StringField(this, 41, value);
};


/**
 * optional int64 giftScene = 42;
 * @return {number}
 */
proto.GiftStruct.prototype.getGiftscene = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setGiftscene = function(value) {
  return jspb.Message.setProto3IntField(this, 42, value);
};


/**
 * optional GiftBanner giftBanner = 43;
 * @return {?proto.GiftBanner}
 */
proto.GiftStruct.prototype.getGiftbanner = function() {
  return /** @type{?proto.GiftBanner} */ (
    jspb.Message.getWrapperField(this, proto.GiftBanner, 43));
};


/**
 * @param {?proto.GiftBanner|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setGiftbanner = function(value) {
  return jspb.Message.setWrapperField(this, 43, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearGiftbanner = function() {
  return this.setGiftbanner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasGiftbanner = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * repeated string triggerWords = 44;
 * @return {!Array<string>}
 */
proto.GiftStruct.prototype.getTriggerwordsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 44));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setTriggerwordsList = function(value) {
  return jspb.Message.setField(this, 44, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.addTriggerwords = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 44, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearTriggerwordsList = function() {
  return this.setTriggerwordsList([]);
};


/**
 * repeated GiftBuffInfo giftBuffInfos = 45;
 * @return {!Array<!proto.GiftBuffInfo>}
 */
proto.GiftStruct.prototype.getGiftbuffinfosList = function() {
  return /** @type{!Array<!proto.GiftBuffInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GiftBuffInfo, 45));
};


/**
 * @param {!Array<!proto.GiftBuffInfo>} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setGiftbuffinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 45, value);
};


/**
 * @param {!proto.GiftBuffInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GiftBuffInfo}
 */
proto.GiftStruct.prototype.addGiftbuffinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 45, opt_value, proto.GiftBuffInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearGiftbuffinfosList = function() {
  return this.setGiftbuffinfosList([]);
};


/**
 * optional bool forFirstRecharge = 46;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getForfirstrecharge = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 46, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setForfirstrecharge = function(value) {
  return jspb.Message.setProto3BooleanField(this, 46, value);
};


/**
 * optional Image dynamicImgForSelected = 47;
 * @return {?proto.Image}
 */
proto.GiftStruct.prototype.getDynamicimgforselected = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 47));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setDynamicimgforselected = function(value) {
  return jspb.Message.setWrapperField(this, 47, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearDynamicimgforselected = function() {
  return this.setDynamicimgforselected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasDynamicimgforselected = function() {
  return jspb.Message.getField(this, 47) != null;
};


/**
 * optional int32 afterSendAction = 48;
 * @return {number}
 */
proto.GiftStruct.prototype.getAftersendaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 48, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setAftersendaction = function(value) {
  return jspb.Message.setProto3IntField(this, 48, value);
};


/**
 * optional int64 giftOfflineTime = 49;
 * @return {number}
 */
proto.GiftStruct.prototype.getGiftofflinetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 49, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setGiftofflinetime = function(value) {
  return jspb.Message.setProto3IntField(this, 49, value);
};


/**
 * optional string topBarText = 50;
 * @return {string}
 */
proto.GiftStruct.prototype.getTopbartext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setTopbartext = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};


/**
 * optional Image topRightAvatar = 51;
 * @return {?proto.Image}
 */
proto.GiftStruct.prototype.getToprightavatar = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 51));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setToprightavatar = function(value) {
  return jspb.Message.setWrapperField(this, 51, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearToprightavatar = function() {
  return this.setToprightavatar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasToprightavatar = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * optional string bannerSchemeUrl = 52;
 * @return {string}
 */
proto.GiftStruct.prototype.getBannerschemeurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 52, ""));
};


/**
 * @param {string} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setBannerschemeurl = function(value) {
  return jspb.Message.setProto3StringField(this, 52, value);
};


/**
 * optional bool isLocked = 53;
 * @return {boolean}
 */
proto.GiftStruct.prototype.getIslocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 53, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setIslocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 53, value);
};


/**
 * optional int64 reqExtraType = 54;
 * @return {number}
 */
proto.GiftStruct.prototype.getReqextratype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 54, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setReqextratype = function(value) {
  return jspb.Message.setProto3IntField(this, 54, value);
};


/**
 * repeated int64 assetIds = 55;
 * @return {!Array<number>}
 */
proto.GiftStruct.prototype.getAssetidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 55));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setAssetidsList = function(value) {
  return jspb.Message.setField(this, 55, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.addAssetids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 55, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearAssetidsList = function() {
  return this.setAssetidsList([]);
};


/**
 * optional GiftPreviewInfo giftPreviewInfo = 56;
 * @return {?proto.GiftPreviewInfo}
 */
proto.GiftStruct.prototype.getGiftpreviewinfo = function() {
  return /** @type{?proto.GiftPreviewInfo} */ (
    jspb.Message.getWrapperField(this, proto.GiftPreviewInfo, 56));
};


/**
 * @param {?proto.GiftPreviewInfo|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setGiftpreviewinfo = function(value) {
  return jspb.Message.setWrapperField(this, 56, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearGiftpreviewinfo = function() {
  return this.setGiftpreviewinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasGiftpreviewinfo = function() {
  return jspb.Message.getField(this, 56) != null;
};


/**
 * optional GiftTip giftTip = 57;
 * @return {?proto.GiftTip}
 */
proto.GiftStruct.prototype.getGifttip = function() {
  return /** @type{?proto.GiftTip} */ (
    jspb.Message.getWrapperField(this, proto.GiftTip, 57));
};


/**
 * @param {?proto.GiftTip|undefined} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setGifttip = function(value) {
  return jspb.Message.setWrapperField(this, 57, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearGifttip = function() {
  return this.setGifttip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GiftStruct.prototype.hasGifttip = function() {
  return jspb.Message.getField(this, 57) != null;
};


/**
 * optional int32 needSweepLightCount = 58;
 * @return {number}
 */
proto.GiftStruct.prototype.getNeedsweeplightcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 58, 0));
};


/**
 * @param {number} value
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.setNeedsweeplightcount = function(value) {
  return jspb.Message.setProto3IntField(this, 58, value);
};


/**
 * repeated GiftGroupInfo groupInfo = 59;
 * @return {!Array<!proto.GiftGroupInfo>}
 */
proto.GiftStruct.prototype.getGroupinfoList = function() {
  return /** @type{!Array<!proto.GiftGroupInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GiftGroupInfo, 59));
};


/**
 * @param {!Array<!proto.GiftGroupInfo>} value
 * @return {!proto.GiftStruct} returns this
*/
proto.GiftStruct.prototype.setGroupinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 59, value);
};


/**
 * @param {!proto.GiftGroupInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GiftGroupInfo}
 */
proto.GiftStruct.prototype.addGroupinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 59, opt_value, proto.GiftGroupInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GiftStruct} returns this
 */
proto.GiftStruct.prototype.clearGroupinfoList = function() {
  return this.setGroupinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AssetEffectMixInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AssetEffectMixInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AssetEffectMixInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssetEffectMixInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AssetEffectMixInfo}
 */
proto.AssetEffectMixInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AssetEffectMixInfo;
  return proto.AssetEffectMixInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AssetEffectMixInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AssetEffectMixInfo}
 */
proto.AssetEffectMixInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AssetEffectMixInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AssetEffectMixInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AssetEffectMixInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AssetEffectMixInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LuckyMoneyGiftMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.LuckyMoneyGiftMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LuckyMoneyGiftMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LuckyMoneyGiftMeta.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LuckyMoneyGiftMeta}
 */
proto.LuckyMoneyGiftMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LuckyMoneyGiftMeta;
  return proto.LuckyMoneyGiftMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LuckyMoneyGiftMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LuckyMoneyGiftMeta}
 */
proto.LuckyMoneyGiftMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LuckyMoneyGiftMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LuckyMoneyGiftMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LuckyMoneyGiftMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LuckyMoneyGiftMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftPanelOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftPanelOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftPanelOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftPanelOperation.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftPanelOperation}
 */
proto.GiftPanelOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftPanelOperation;
  return proto.GiftPanelOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftPanelOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftPanelOperation}
 */
proto.GiftPanelOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftPanelOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftPanelOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftPanelOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftPanelOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftBanner.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftBanner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftBanner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftBanner.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftBanner}
 */
proto.GiftBanner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftBanner;
  return proto.GiftBanner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftBanner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftBanner}
 */
proto.GiftBanner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftBanner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftBanner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftBanner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftBanner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftBuffInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftBuffInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftBuffInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftBuffInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftBuffInfo}
 */
proto.GiftBuffInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftBuffInfo;
  return proto.GiftBuffInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftBuffInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftBuffInfo}
 */
proto.GiftBuffInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftBuffInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftBuffInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftBuffInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftBuffInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftPreviewInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftPreviewInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftPreviewInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftPreviewInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftPreviewInfo}
 */
proto.GiftPreviewInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftPreviewInfo;
  return proto.GiftPreviewInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftPreviewInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftPreviewInfo}
 */
proto.GiftPreviewInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftPreviewInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftPreviewInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftPreviewInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftPreviewInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftTip.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftTip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftTip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftTip.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftTip}
 */
proto.GiftTip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftTip;
  return proto.GiftTip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftTip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftTip}
 */
proto.GiftTip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftTip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftTip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftTip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftTip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GiftGroupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GiftGroupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GiftGroupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftGroupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GiftGroupInfo}
 */
proto.GiftGroupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GiftGroupInfo;
  return proto.GiftGroupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GiftGroupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GiftGroupInfo}
 */
proto.GiftGroupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GiftGroupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GiftGroupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GiftGroupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GiftGroupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EffectMixImageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.EffectMixImageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EffectMixImageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EffectMixImageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EffectMixImageInfo}
 */
proto.EffectMixImageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EffectMixImageInfo;
  return proto.EffectMixImageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EffectMixImageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EffectMixImageInfo}
 */
proto.EffectMixImageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EffectMixImageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EffectMixImageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EffectMixImageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EffectMixImageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};